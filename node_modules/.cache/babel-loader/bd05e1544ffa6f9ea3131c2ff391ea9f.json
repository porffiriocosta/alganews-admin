{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-admin\\\\src\\\\app\\\\views\\\\UserEdit.view.tsx\",\n    _s = $RefreshSig$();\n\nimport { Card, notification, Skeleton } from 'antd';\nimport { UserService } from 'danielbonifacio-sdk';\nimport moment from 'moment';\nimport { useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\nimport useBreadcrumb from '../../core/hooks/useBreadcrumb';\nimport usePageTitle from '../../core/hooks/usePageTitle';\nimport useUser from '../../core/hooks/useUser';\nimport NotFoundError from '../components/NotFoundError';\nimport UserForm from '../features/UserForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserEditView() {\n  _s();\n\n  usePageTitle('Edição do usuário');\n  useBreadcrumb('Usuários/Edição');\n  const params = useParams();\n  const history = useHistory();\n  const {\n    user,\n    fetchUser,\n    notFound\n  } = useUser();\n  useEffect(() => {\n    if (!isNaN(Number(params.id))) fetchUser(Number(params.id));\n  }, [fetchUser, params.id]);\n  const transformUserData = useCallback(user => {\n    return { ...user,\n      createdAt: moment(user.createdAt),\n      updatedAt: moment(user.updatedAt),\n      birthdate: moment(user.birthdate)\n    };\n  }, []);\n  if (isNaN(Number(params.id))) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: '/usuarios'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 40\n  }, this);\n  if (notFound) return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(NotFoundError, {\n      title: 'Usuário não encontrado',\n      actionDestination: '/usuarios',\n      actionTitle: 'Voltar para lista de usuários'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this);\n\n  async function handleUserUpdate(user) {\n    await UserService.updateExistingUser(Number(params.id), user).then(() => {\n      history.push('/usuarios');\n      notification.success({\n        message: 'Usuário foi atualizado com sucesso'\n      });\n    });\n  }\n\n  if (!user) return /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UserForm, {\n      onUpdate: handleUserUpdate,\n      user: transformUserData(user)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(UserEditView, \"7av2zVGINITpOhxIWwW058su8u8=\", false, function () {\n  return [usePageTitle, useBreadcrumb, useParams, useHistory, useUser];\n});\n\n_c = UserEditView;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditView\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/app/views/UserEdit.view.tsx"],"names":["Card","notification","Skeleton","UserService","moment","useCallback","useEffect","Redirect","useHistory","useParams","useBreadcrumb","usePageTitle","useUser","NotFoundError","UserForm","UserEditView","params","history","user","fetchUser","notFound","isNaN","Number","id","transformUserData","createdAt","updatedAt","birthdate","handleUserUpdate","updateExistingUser","then","push","success","message"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,YAAf,EAA6BC,QAA7B,QAA6C,MAA7C;AACA,SAAeC,WAAf,QAAkC,qBAAlC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,kBAAhD;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,QAAP,MAAqB,sBAArB;;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrCJ,EAAAA,YAAY,CAAC,mBAAD,CAAZ;AACAD,EAAAA,aAAa,CAAC,iBAAD,CAAb;AAEA,QAAMM,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,OAAO,GAAGT,UAAU,EAA1B;AAEA,QAAM;AAAEU,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA;AAAnB,MAAgCR,OAAO,EAA7C;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACe,KAAK,CAACC,MAAM,CAACN,MAAM,CAACO,EAAR,CAAP,CAAV,EAA+BJ,SAAS,CAACG,MAAM,CAACN,MAAM,CAACO,EAAR,CAAP,CAAT;AAChC,GAFQ,EAEN,CAACJ,SAAD,EAAYH,MAAM,CAACO,EAAnB,CAFM,CAAT;AAIA,QAAMC,iBAAiB,GAAGnB,WAAW,CAAEa,IAAD,IAAyB;AAC7D,WAAO,EACL,GAAGA,IADE;AAELO,MAAAA,SAAS,EAAErB,MAAM,CAACc,IAAI,CAACO,SAAN,CAFZ;AAGLC,MAAAA,SAAS,EAAEtB,MAAM,CAACc,IAAI,CAACQ,SAAN,CAHZ;AAILC,MAAAA,SAAS,EAAEvB,MAAM,CAACc,IAAI,CAACS,SAAN;AAJZ,KAAP;AAMD,GAPoC,EAOlC,EAPkC,CAArC;AASA,MAAIN,KAAK,CAACC,MAAM,CAACN,MAAM,CAACO,EAAR,CAAP,CAAT,EAA8B,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA,UAAP;AAE9B,MAAIH,QAAJ,EACE,oBACE,QAAC,IAAD;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,KAAK,EAAE,wBADT;AAEE,MAAA,iBAAiB,EAAE,WAFrB;AAGE,MAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAUF,iBAAeQ,gBAAf,CAAgCV,IAAhC,EAAkD;AAChD,UAAMf,WAAW,CAAC0B,kBAAZ,CAA+BP,MAAM,CAACN,MAAM,CAACO,EAAR,CAArC,EAAkDL,IAAlD,EAAwDY,IAAxD,CAA6D,MAAM;AACvEb,MAAAA,OAAO,CAACc,IAAR,CAAa,WAAb;AACA9B,MAAAA,YAAY,CAAC+B,OAAb,CAAqB;AACnBC,QAAAA,OAAO,EAAE;AADU,OAArB;AAGD,KALK,CAAN;AAMD;;AAED,MAAI,CAACf,IAAL,EAAW,oBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEU,gBAApB;AAAsC,MAAA,IAAI,EAAEJ,iBAAiB,CAACN,IAAD;AAA7D;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD;;GAnDuBH,Y;UACtBJ,Y,EACAD,a,EAEeD,S,EACCD,U,EAEsBI,O;;;KAPhBG,Y","sourcesContent":["import { Card, notification, Skeleton } from 'antd';\nimport { User, UserService } from 'danielbonifacio-sdk';\nimport moment from 'moment';\nimport { useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Redirect, useHistory, useParams } from 'react-router-dom';\nimport useBreadcrumb from '../../core/hooks/useBreadcrumb';\nimport usePageTitle from '../../core/hooks/usePageTitle';\nimport useUser from '../../core/hooks/useUser';\nimport NotFoundError from '../components/NotFoundError';\nimport UserForm from '../features/UserForm';\n\nexport default function UserEditView() {\n  usePageTitle('Edição do usuário');\n  useBreadcrumb('Usuários/Edição');\n\n  const params = useParams<{ id: string }>();\n  const history = useHistory();\n\n  const { user, fetchUser, notFound } = useUser();\n\n  useEffect(() => {\n    if (!isNaN(Number(params.id))) fetchUser(Number(params.id));\n  }, [fetchUser, params.id]);\n\n  const transformUserData = useCallback((user: User.Detailed) => {\n    return {\n      ...user,\n      createdAt: moment(user.createdAt),\n      updatedAt: moment(user.updatedAt),\n      birthdate: moment(user.birthdate),\n    };\n  }, []);\n\n  if (isNaN(Number(params.id))) return <Redirect to={'/usuarios'} />;\n\n  if (notFound)\n    return (\n      <Card>\n        <NotFoundError\n          title={'Usuário não encontrado'}\n          actionDestination={'/usuarios'}\n          actionTitle={'Voltar para lista de usuários'}\n        />\n      </Card>\n    );\n\n  async function handleUserUpdate(user: User.Input) {\n    await UserService.updateExistingUser(Number(params.id), user).then(() => {\n      history.push('/usuarios');\n      notification.success({\n        message: 'Usuário foi atualizado com sucesso',\n      });\n    });\n  }\n\n  if (!user) return <Skeleton />;\n\n  return (\n    <>\n      <UserForm onUpdate={handleUserUpdate} user={transformUserData(user)} />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}