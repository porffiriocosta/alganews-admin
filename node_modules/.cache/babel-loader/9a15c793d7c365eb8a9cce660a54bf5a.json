{"ast":null,"code":"import React, { Component } from 'react';\nimport { Input } from 'antd';\nimport InputMask from './inputmask-core';\nimport { isRedo, isUndo, getSelection, setSelection } from './helpers';\nexport default class MaskedInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: null,\n      _lastValue: null,\n      _Input: null,\n      mask: null,\n      prevMask: null,\n      prevValue: null\n    };\n\n    this._onChange = e => {\n      // console.log('onChange', JSON.stringify(getSelection(this.state.input)), e.target.value)\n      let maskValue = this.state.mask.getValue();\n      let incomingValue = e.target.value;\n\n      if (incomingValue !== maskValue) {\n        // only modify mask if form contents actually changed\n        this._updateMaskSelection();\n\n        this.state.mask.setValue(incomingValue); // write the whole updated value into the mask\n\n        this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n\n        this._updateInputSelection();\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(e);\n      }\n    };\n\n    this._onKeyDown = e => {\n      setTimeout(() => {\n        this.state.input.classList[this.state.input.value ? 'add' : 'remove']('has-value');\n      }, 100);\n\n      if (isUndo(e)) {\n        e.preventDefault();\n\n        if (this.state.mask.undo()) {\n          this.setInputValue(this._getDisplayValue());\n\n          this._updateInputSelection();\n\n          if (this.props.onChange) {\n            this.props.onChange(e);\n          }\n        }\n\n        return;\n      } else if (isRedo(e)) {\n        e.preventDefault();\n\n        if (this.state.mask.redo()) {\n          this.setInputValue(this._getDisplayValue());\n\n          this._updateInputSelection();\n\n          if (this.props.onChange) {\n            this.props.onChange(e);\n          }\n        }\n\n        return;\n      }\n\n      if (e.key === 'Backspace') {\n        e.preventDefault();\n\n        this._updateMaskSelection();\n\n        if (this.state.mask.backspace()) {\n          let value = this._getDisplayValue();\n\n          this.setInputValue(value);\n\n          if (value) {\n            this._updateInputSelection();\n          }\n\n          if (this.props.onChange) {\n            this.props.onChange(e);\n          }\n        }\n      }\n    };\n\n    this._onKeyPress = e => {\n      // console.log('onKeyPress', JSON.stringify(getSelection(this.state.input)), e.key, e.target.value)\n      // Ignore modified key presses\n      // Ignore enter key to allow form submission\n      if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\n        return;\n      }\n\n      e.preventDefault();\n\n      this._updateMaskSelection();\n\n      if (this.state.mask.input(e.key || e.data)) {\n        this.setInputValue(this.state.mask.getValue());\n\n        this._updateInputSelection();\n\n        if (this.props.onChange) {\n          this.props.onChange(e);\n        }\n      }\n    };\n\n    this._onPaste = e => {\n      e.preventDefault();\n\n      this._updateMaskSelection(); // getData value needed for IE also works in FF & Chrome\n\n\n      if (this.state.mask.paste(e.clipboardData.getData('Text'))) {\n        // @ts-ignore\n        this.setInputValue(this.state.mask.getValue()); // Timeout needed for IE\n\n        setTimeout(() => this._updateInputSelection(), 0);\n\n        if (this.props.onChange) {\n          // @ts-ignore\n          this.props.onChange(e);\n        }\n      }\n    };\n\n    this.getInputProps = () => {\n      let maxLength = this.state.mask.pattern.length;\n\n      let eventHandlers = this._getEventHandlers();\n\n      let {\n        placeholder = this.state.mask.emptyValue\n      } = this.props;\n      let {\n        placeholderChar,\n        formatCharacters,\n        ...cleanedProps\n      } = this.props;\n      const props = { ...cleanedProps,\n        ...eventHandlers,\n        maxLength,\n        placeholder\n      };\n      delete props.value;\n      return props;\n    };\n\n    this.setInputValue = value => {\n      if (!this.state._Input || !this.state._Input.input) return;\n      if (value === this.state._lastValue) return;\n      this.state._lastValue = value;\n\n      this.state._Input.setState({\n        value\n      });\n\n      this.state._Input.input.value = value;\n    };\n\n    this.handleInputRef = ref => {\n      if (!ref) return;\n      this.state._Input = ref;\n      this.state.input = ref.input;\n\n      if (this.state._lastValue === null && typeof this.props.defaultValue === 'string') {\n        this.state.mask.setValue(this.props.defaultValue); // write the whole updated value into the mask\n\n        this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n      }\n    };\n\n    let options = {\n      pattern: this.props.mask,\n      value: this.props.value,\n      formatCharacters: this.props.formatCharacters\n    };\n\n    if (this.props.placeholderChar) {\n      options.placeholderChar = this.props.placeholderChar;\n    }\n\n    this.state.mask = new InputMask(options);\n  }\n\n  componentDidMount() {\n    this.setInputValue(this._getDisplayValue());\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const currMask = state.prevMask;\n    const currValue = state.prevValue;\n    const nextMask = props.mask;\n    const nextValue = props.value;\n\n    if (nextMask !== currMask && nextValue !== currValue) {\n      // if we get a new value and a new mask at the same time\n      // check if the mask.value is still the initial value\n      // - if so use the next's value\n      // - otherwise the `this.mask` has a value for us (most likely from paste action)\n      if (state.mask.getValue() === state.mask.emptyValue) {\n        state.mask.setPattern(nextMask, {\n          value: nextValue,\n          selection: state.input && getSelection(state.input)\n        });\n      } else {\n        state.mask.setPattern(nextMask, {\n          value: state.mask.getRawValue(),\n          selection: state.input && getSelection(state.input)\n        });\n      }\n    } else if (currMask !== nextMask) {\n      state.mask.setPattern(nextMask, {\n        value: state.mask.getRawValue(),\n        selection: state.input && getSelection(state.input)\n      });\n    }\n\n    if (currValue !== nextValue) {\n      state.mask.setValue(nextValue);\n      let value = state.mask.getValue();\n      value = value === state.mask.emptyValue ? '' : value;\n\n      if (state._Input && state._Input.input && value !== state._lastValue) {\n        state._lastValue = value;\n\n        state._Input.setState({\n          value\n        });\n\n        state._Input.input.value = value;\n      }\n    }\n\n    if (nextMask !== currMask || nextValue !== currValue) {\n      const newState = {};\n\n      if (nextMask !== currMask) {\n        newState.prevMask = nextMask;\n      }\n\n      if (nextValue !== currValue) {\n        newState.prevValue = nextValue;\n      }\n\n      return newState;\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.props.mask) return null;\n\n    if (prevProps.mask !== this.props.mask && this.state.mask.selection.start) {\n      this._updateInputSelection();\n    }\n\n    return;\n  }\n\n  _updateMaskSelection() {\n    this.state.mask.selection = getSelection(this.state.input);\n  }\n\n  _updateInputSelection() {\n    setSelection(this.state.input, this.state.mask.selection);\n  }\n\n  _getDisplayValue() {\n    let value = this.state.mask.getValue();\n    return value === this.state.mask.emptyValue ? '' : value;\n  }\n\n  _keyPressPropName() {\n    if (typeof navigator !== 'undefined') {\n      return navigator.userAgent.match(/Android/i) ? 'onBeforeInput' : 'onKeyPress';\n    }\n\n    return 'onKeyPress';\n  }\n\n  _getEventHandlers() {\n    return {\n      onChange: this._onChange,\n      onKeyDown: this._onKeyDown,\n      onPaste: this._onPaste,\n      [this._keyPressPropName()]: this._onKeyPress\n    };\n  }\n\n  focus() {\n    this.state.input.focus();\n  }\n\n  blur() {\n    this.state.input.blur();\n  }\n\n  render() {\n    return React.createElement(Input, Object.assign({}, this.getInputProps(), {\n      ref: this.handleInputRef\n    }));\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/MaskedInput.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { Component } from 'react';\nimport { Input } from 'antd';\nimport InputMask from './inputmask-core';\nimport { isRedo, isUndo, getSelection, setSelection } from './helpers';\nexport default class MaskedInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: null,\n            _lastValue: null,\n            _Input: null,\n            mask: null,\n            prevMask: null,\n            prevValue: null,\n        };\n        this._onChange = (e) => {\n            // console.log('onChange', JSON.stringify(getSelection(this.state.input)), e.target.value)\n            let maskValue = this.state.mask.getValue();\n            let incomingValue = e.target.value;\n            if (incomingValue !== maskValue) {\n                // only modify mask if form contents actually changed\n                this._updateMaskSelection();\n                this.state.mask.setValue(incomingValue); // write the whole updated value into the mask\n                this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n                this._updateInputSelection();\n            }\n            if (this.props.onChange) {\n                this.props.onChange(e);\n            }\n        };\n        this._onKeyDown = (e) => {\n            setTimeout(() => {\n                this.state.input.classList[this.state.input.value ? 'add' : 'remove']('has-value');\n            }, 100);\n            if (isUndo(e)) {\n                e.preventDefault();\n                if (this.state.mask.undo()) {\n                    this.setInputValue(this._getDisplayValue());\n                    this._updateInputSelection();\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n                return;\n            }\n            else if (isRedo(e)) {\n                e.preventDefault();\n                if (this.state.mask.redo()) {\n                    this.setInputValue(this._getDisplayValue());\n                    this._updateInputSelection();\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n                return;\n            }\n            if (e.key === 'Backspace') {\n                e.preventDefault();\n                this._updateMaskSelection();\n                if (this.state.mask.backspace()) {\n                    let value = this._getDisplayValue();\n                    this.setInputValue(value);\n                    if (value) {\n                        this._updateInputSelection();\n                    }\n                    if (this.props.onChange) {\n                        this.props.onChange(e);\n                    }\n                }\n            }\n        };\n        this._onKeyPress = (e) => {\n            // console.log('onKeyPress', JSON.stringify(getSelection(this.state.input)), e.key, e.target.value)\n            // Ignore modified key presses\n            // Ignore enter key to allow form submission\n            if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\n                return;\n            }\n            e.preventDefault();\n            this._updateMaskSelection();\n            if (this.state.mask.input(e.key || e.data)) {\n                this.setInputValue(this.state.mask.getValue());\n                this._updateInputSelection();\n                if (this.props.onChange) {\n                    this.props.onChange(e);\n                }\n            }\n        };\n        this._onPaste = (e) => {\n            e.preventDefault();\n            this._updateMaskSelection();\n            // getData value needed for IE also works in FF & Chrome\n            if (this.state.mask.paste(e.clipboardData.getData('Text'))) {\n                // @ts-ignore\n                this.setInputValue(this.state.mask.getValue());\n                // Timeout needed for IE\n                setTimeout(() => this._updateInputSelection(), 0);\n                if (this.props.onChange) {\n                    // @ts-ignore\n                    this.props.onChange(e);\n                }\n            }\n        };\n        this.getInputProps = () => {\n            let maxLength = this.state.mask.pattern.length;\n            let eventHandlers = this._getEventHandlers();\n            let { placeholder = this.state.mask.emptyValue } = this.props;\n            let { placeholderChar, formatCharacters, ...cleanedProps } = this.props;\n            const props = { ...cleanedProps, ...eventHandlers, maxLength, placeholder };\n            delete props.value;\n            return props;\n        };\n        this.setInputValue = (value) => {\n            if (!this.state._Input || !this.state._Input.input)\n                return;\n            if (value === this.state._lastValue)\n                return;\n            this.state._lastValue = value;\n            this.state._Input.setState({ value });\n            this.state._Input.input.value = value;\n        };\n        this.handleInputRef = (ref) => {\n            if (!ref)\n                return;\n            this.state._Input = ref;\n            this.state.input = ref.input;\n            if (this.state._lastValue === null &&\n                typeof this.props.defaultValue === 'string') {\n                this.state.mask.setValue(this.props.defaultValue); // write the whole updated value into the mask\n                this.setInputValue(this._getDisplayValue()); // update the form with pattern applied to the value\n            }\n        };\n        let options = {\n            pattern: this.props.mask,\n            value: this.props.value,\n            formatCharacters: this.props.formatCharacters\n        };\n        if (this.props.placeholderChar) {\n            options.placeholderChar = this.props.placeholderChar;\n        }\n        this.state.mask = new InputMask(options);\n    }\n    componentDidMount() {\n        this.setInputValue(this._getDisplayValue());\n    }\n    static getDerivedStateFromProps(props, state) {\n        const currMask = state.prevMask;\n        const currValue = state.prevValue;\n        const nextMask = props.mask;\n        const nextValue = props.value;\n        if (nextMask !== currMask &&\n            nextValue !== currValue) {\n            // if we get a new value and a new mask at the same time\n            // check if the mask.value is still the initial value\n            // - if so use the next's value\n            // - otherwise the `this.mask` has a value for us (most likely from paste action)\n            if (state.mask.getValue() === state.mask.emptyValue) {\n                state.mask.setPattern(nextMask, {\n                    value: nextValue,\n                    selection: state.input && getSelection(state.input)\n                });\n            }\n            else {\n                state.mask.setPattern(nextMask, {\n                    value: state.mask.getRawValue(),\n                    selection: state.input && getSelection(state.input)\n                });\n            }\n        }\n        else if (currMask !== nextMask) {\n            state.mask.setPattern(nextMask, {\n                value: state.mask.getRawValue(),\n                selection: state.input && getSelection(state.input)\n            });\n        }\n        if (currValue !== nextValue) {\n            state.mask.setValue(nextValue);\n            let value = state.mask.getValue();\n            value = value === state.mask.emptyValue ? '' : value;\n            if (state._Input && state._Input.input && value !== state._lastValue) {\n                state._lastValue = value;\n                state._Input.setState({ value });\n                state._Input.input.value = value;\n            }\n        }\n        if (nextMask !== currMask || nextValue !== currValue) {\n            const newState = {};\n            if (nextMask !== currMask) {\n                newState.prevMask = nextMask;\n            }\n            if (nextValue !== currValue) {\n                newState.prevValue = nextValue;\n            }\n            return newState;\n        }\n        return null;\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.props.mask)\n            return null;\n        if (prevProps.mask !== this.props.mask && this.state.mask.selection.start) {\n            this._updateInputSelection();\n        }\n        return;\n    }\n    _updateMaskSelection() {\n        this.state.mask.selection = getSelection(this.state.input);\n    }\n    _updateInputSelection() {\n        setSelection(this.state.input, this.state.mask.selection);\n    }\n    _getDisplayValue() {\n        let value = this.state.mask.getValue();\n        return value === this.state.mask.emptyValue ? '' : value;\n    }\n    _keyPressPropName() {\n        if (typeof navigator !== 'undefined') {\n            return navigator.userAgent.match(/Android/i)\n                ? 'onBeforeInput'\n                : 'onKeyPress';\n        }\n        return 'onKeyPress';\n    }\n    _getEventHandlers() {\n        return {\n            onChange: this._onChange,\n            onKeyDown: this._onKeyDown,\n            onPaste: this._onPaste,\n            [this._keyPressPropName()]: this._onKeyPress\n        };\n    }\n    focus() {\n        this.state.input.focus();\n    }\n    blur() {\n        this.state.input.blur();\n    }\n    render() {\n        return React.createElement(Input, Object.assign({}, this.getInputProps(), { ref: this.handleInputRef }));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}