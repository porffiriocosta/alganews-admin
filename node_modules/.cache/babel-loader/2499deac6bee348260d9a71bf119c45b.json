{"ast":null,"code":"import{useCallback}from'react';import{useDispatch,useSelector}from'react-redux';import*as ExpensesActions from'../store/Expense.slice';import*as RevenuesActions from'../store/Revenue.slice';export default function useCashFlow(type){var dispatch=useDispatch();var query=useSelector(function(s){return type==='EXPENSE'?s.cashFlow.expense.query:s.cashFlow.revenue.query;});var entries=useSelector(function(s){return type==='EXPENSE'?s.cashFlow.expense.list:s.cashFlow.revenue.list;});var fetching=useSelector(function(s){return type==='EXPENSE'?s.cashFlow.expense.fetching:s.cashFlow.revenue.fetching;});var selected=useSelector(function(s){return type==='EXPENSE'?s.cashFlow.expense.selected:s.cashFlow.revenue.selected;});var fetchEntries=useCallback(function(){return dispatch(type==='EXPENSE'?ExpensesActions.getExpenses():RevenuesActions.getRevenues()).unwrap();},[dispatch,type]);var createEntry=useCallback(function(entry){return dispatch(type==='EXPENSE'?ExpensesActions.createExpense(entry):RevenuesActions.createRevenue(entry)).unwrap();},[dispatch,type]);var updateEntry=useCallback(function(entryId,entry){return dispatch(type==='EXPENSE'?ExpensesActions.updateExpense({entryId:entryId,entry:entry}):RevenuesActions.updateRevenue({entryId:entryId,entry:entry})).unwrap();},[dispatch,type]);var removeEntry=useCallback(function(entryId){return dispatch(type==='EXPENSE'?ExpensesActions.removeExpense(entryId):RevenuesActions.removeRevenue(entryId)).unwrap();},[dispatch,type]);var removeEntries=useCallback(function(ids){return dispatch(type==='EXPENSE'?ExpensesActions.removeEntriesInBatch(ids):RevenuesActions.removeEntriesInBatch(ids));},[dispatch,type]);var setSelected=useCallback(function(keys){return dispatch(type==='EXPENSE'?ExpensesActions.setSelectedExpenses(keys):RevenuesActions.setSelectedRevenues(keys));},[dispatch,type]);var setQuery=useCallback(function(query){return dispatch(type==='EXPENSE'?ExpensesActions.setQuery(query):RevenuesActions.setQuery(query));},[dispatch,type]);return{entries:entries,query:query,selected:selected,fetching:fetching,fetchEntries:fetchEntries,removeEntries:removeEntries,setQuery:setQuery,setSelected:setSelected,createEntry:createEntry,updateEntry:updateEntry,removeEntry:removeEntry};}","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/hooks/useCashFlow.tsx"],"names":["useCallback","useDispatch","useSelector","ExpensesActions","RevenuesActions","useCashFlow","type","dispatch","query","s","cashFlow","expense","revenue","entries","list","fetching","selected","fetchEntries","getExpenses","getRevenues","unwrap","createEntry","entry","createExpense","createRevenue","updateEntry","entryId","updateExpense","updateRevenue","removeEntry","removeExpense","removeRevenue","removeEntries","ids","removeEntriesInBatch","setSelected","keys","setSelectedExpenses","setSelectedRevenues","setQuery"],"mappings":"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","sourcesContent":["import { Key } from 'antd/lib/table/interface';\nimport { CashFlow } from 'danielbonifacio-sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../store';\nimport * as ExpensesActions from '../store/Expense.slice';\nimport * as RevenuesActions from '../store/Revenue.slice';\n\ntype CashFlowEntryType = CashFlow.EntrySummary['type'];\n\nexport default function useCashFlow(type: CashFlowEntryType) {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const query = useSelector((s: RootState) =>\n    type === 'EXPENSE' ? s.cashFlow.expense.query : s.cashFlow.revenue.query\n  );\n  const entries = useSelector((s: RootState) =>\n    type === 'EXPENSE' ? s.cashFlow.expense.list : s.cashFlow.revenue.list\n  );\n  const fetching = useSelector((s: RootState) =>\n    type === 'EXPENSE'\n      ? s.cashFlow.expense.fetching\n      : s.cashFlow.revenue.fetching\n  );\n  const selected = useSelector((s: RootState) =>\n    type === 'EXPENSE'\n      ? s.cashFlow.expense.selected\n      : s.cashFlow.revenue.selected\n  );\n\n  const fetchEntries = useCallback(\n    () =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.getExpenses()\n          : RevenuesActions.getRevenues()\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const createEntry = useCallback(\n    (entry: CashFlow.EntryInput) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.createExpense(entry)\n          : RevenuesActions.createRevenue(entry)\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const updateEntry = useCallback(\n    (entryId: number, entry: CashFlow.EntryInput) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.updateExpense({\n              entryId: entryId,\n              entry: entry,\n            })\n          : RevenuesActions.updateRevenue({\n              entryId: entryId,\n              entry: entry,\n            })\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const removeEntry = useCallback(\n    (entryId: number) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.removeExpense(entryId)\n          : RevenuesActions.removeRevenue(entryId)\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const removeEntries = useCallback(\n    (ids: number[]) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.removeEntriesInBatch(ids)\n          : RevenuesActions.removeEntriesInBatch(ids)\n      ),\n    [dispatch, type]\n  );\n\n  const setSelected = useCallback(\n    (keys: Key[]) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.setSelectedExpenses(keys)\n          : RevenuesActions.setSelectedRevenues(keys)\n      ),\n    [dispatch, type]\n  );\n\n  const setQuery = useCallback(\n    (query: Partial<CashFlow.Query>) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.setQuery(query)\n          : RevenuesActions.setQuery(query)\n      ),\n    [dispatch, type]\n  );\n\n  return {\n    entries,\n    query,\n    selected,\n    fetching,\n    fetchEntries,\n    removeEntries,\n    setQuery,\n    setSelected,\n    createEntry,\n    updateEntry,\n    removeEntry,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}