{"ast":null,"code":"// import { Route, Switch, useHistory } from 'react-router-dom';\n// import HomeView from './views/Home.view';\n// import UserCreateView from './views/UserCreate.view';\n// import UserEditView from './views/UserEdit.view';\n// import UserListView from './views/UserList.view';\n// import PaymentListView from './views/PaymentList.view';\n// import PaymentCreateView from './views/PaymentCreate.view';\n// import CashFlowRevenuesView from './views/CashFlowRevenues.view';\n// import CashFlowExpensesView from './views/CashFlowExpenses.view';\n// import { useEffect } from 'react';\n// import CustomError from 'danielbonifacio-sdk/dist/CustomError';\n// import { message, notification } from 'antd';\n// import UserDetailsView from './views/UserDetails.view';\n// import PaymentDetailsView from './views/PaymentDetails.view';\n// import AuthService from '../auth/Authorization.service';\n// import jwtDecode from 'jwt-decode';\n// import useAuth from '../core/hooks/useAuth';\n// export default function Routes() {\n//   const history = useHistory();\n//   const { fetchUser } = useAuth();\n//   useEffect(() => {\n//     window.onunhandledrejection = ({ reason }) => {\n//       if (reason instanceof CustomError) {\n//         if (reason.data?.objects) {\n//           reason.data.objects.forEach((error) => {\n//             message.error(error.userMessage);\n//           });\n//         } else {\n//           notification.error({\n//             message: reason.message,\n//             description:\n//               reason.data?.detail === 'Network Error'\n//                 ? 'Erro na rede'\n//                 : reason.data?.detail,\n//           });\n//         }\n//       } else {\n//         reason?.data?.objects?.forEach((object: { userMessage: string }) => {\n//           message.error(object.userMessage);\n//         });\n//         notification.error({\n//           message: reason?.message || 'Houve um erro',\n//         });\n//       }\n//     };\n//     return () => {\n//       window.onunhandledrejection = null;\n//     };\n//   }, []);\n//   useEffect(() => {\n//     async function identify() {\n//       const isInAuthorizationRoute = window.location.pathname === '/authorize';\n//       const code = new URLSearchParams(window.location.search).get('code');\n//       const codeVerifier = AuthService.getCodeVerifier();\n//       const accessToken = AuthService.getAccessToken();\n//       if (!accessToken && !isInAuthorizationRoute) {\n//         AuthService.imperativelySendToLoginScreen();\n//       }\n//       if (isInAuthorizationRoute) {\n//         if (!code) {\n//           notification.error({\n//             message: 'C처digo n찾o foi informado',\n//           });\n//           return;\n//         }\n//         if (!codeVerifier) {\n//           // necessario fazer logout\n//           return;\n//         }\n//         // busca o primeiro token de acesso\n//         const { access_token, refresh_token } =\n//           await AuthService.getFirstAccessTokens({\n//             code,\n//             codeVerifier,\n//             redirectUri: 'http://localhost:3000/authorize',\n//           });\n//         AuthService.setAccessToken(access_token);\n//         AuthService.setRefreshToken(refresh_token);\n//         const decodedToken: Authorization.AccessTokenDecodedBody =\n//           jwtDecode(access_token);\n//         fetchUser(decodedToken['alganews:user_id']);\n//         history.push('/');\n//       }\n//       if (accessToken) {\n//         const decodedToken: Authorization.AccessTokenDecodedBody =\n//           jwtDecode(accessToken);\n//         fetchUser(decodedToken['alganews:user_id']);\n//       }\n//     }\n//     identify();\n//   }, [history, fetchUser]);\n//   return (\n//     <Switch>\n//       <Route path={'/'} exact component={HomeView} />\n//       <Route path={'/usuarios/cadastro'} exact component={UserCreateView} />\n//       <Route path={'/usuarios/edicao/:id'} exact component={UserEditView} />\n//       <Route path={'/usuarios/:id'} exact component={UserDetailsView} />\n//       <Route path={'/usuarios'} exact component={UserListView} />\n//       <Route path={'/pagamentos'} exact component={PaymentListView} />\n//       <Route\n//         path={'/pagamentos/cadastro'}\n//         exact\n//         component={PaymentCreateView}\n//       />\n//       <Route path={'/pagamentos/:id'} exact component={PaymentDetailsView} />\n//       <Route\n//         path={'/fluxo-de-caixa/despesas'}\n//         exact\n//         component={CashFlowExpensesView}\n//       />\n//       <Route\n//         path={'/fluxo-de-caixa/receitas'}\n//         exact\n//         component={CashFlowRevenuesView}\n//       />\n//     </Switch>\n//   );\n// }","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/app/routes.tsx"],"names":[],"mappingssourcesContent":["// import { Route, Switch, useHistory } from 'react-router-dom';\n\n// import HomeView from './views/Home.view';\n// import UserCreateView from './views/UserCreate.view';\n// import UserEditView from './views/UserEdit.view';\n// import UserListView from './views/UserList.view';\n// import PaymentListView from './views/PaymentList.view';\n// import PaymentCreateView from './views/PaymentCreate.view';\n// import CashFlowRevenuesView from './views/CashFlowRevenues.view';\n// import CashFlowExpensesView from './views/CashFlowExpenses.view';\n// import { useEffect } from 'react';\n// import CustomError from 'danielbonifacio-sdk/dist/CustomError';\n// import { message, notification } from 'antd';\n// import UserDetailsView from './views/UserDetails.view';\n// import PaymentDetailsView from './views/PaymentDetails.view';\n// import AuthService from '../auth/Authorization.service';\n// import jwtDecode from 'jwt-decode';\n// import useAuth from '../core/hooks/useAuth';\n\n// export default function Routes() {\n//   const history = useHistory();\n\n//   const { fetchUser } = useAuth();\n\n//   useEffect(() => {\n//     window.onunhandledrejection = ({ reason }) => {\n//       if (reason instanceof CustomError) {\n//         if (reason.data?.objects) {\n//           reason.data.objects.forEach((error) => {\n//             message.error(error.userMessage);\n//           });\n//         } else {\n//           notification.error({\n//             message: reason.message,\n//             description:\n//               reason.data?.detail === 'Network Error'\n//                 ? 'Erro na rede'\n//                 : reason.data?.detail,\n//           });\n//         }\n//       } else {\n//         reason?.data?.objects?.forEach((object: { userMessage: string }) => {\n//           message.error(object.userMessage);\n//         });\n\n//         notification.error({\n//           message: reason?.message || 'Houve um erro',\n//         });\n//       }\n//     };\n\n//     return () => {\n//       window.onunhandledrejection = null;\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     async function identify() {\n//       const isInAuthorizationRoute = window.location.pathname === '/authorize';\n//       const code = new URLSearchParams(window.location.search).get('code');\n\n//       const codeVerifier = AuthService.getCodeVerifier();\n//       const accessToken = AuthService.getAccessToken();\n\n//       if (!accessToken && !isInAuthorizationRoute) {\n//         AuthService.imperativelySendToLoginScreen();\n//       }\n\n//       if (isInAuthorizationRoute) {\n//         if (!code) {\n//           notification.error({\n//             message: 'C처digo n찾o foi informado',\n//           });\n//           return;\n//         }\n\n//         if (!codeVerifier) {\n//           // necessario fazer logout\n//           return;\n//         }\n\n//         // busca o primeiro token de acesso\n//         const { access_token, refresh_token } =\n//           await AuthService.getFirstAccessTokens({\n//             code,\n//             codeVerifier,\n//             redirectUri: 'http://localhost:3000/authorize',\n//           });\n\n//         AuthService.setAccessToken(access_token);\n//         AuthService.setRefreshToken(refresh_token);\n\n//         const decodedToken: Authorization.AccessTokenDecodedBody =\n//           jwtDecode(access_token);\n//         fetchUser(decodedToken['alganews:user_id']);\n//         history.push('/');\n//       }\n\n//       if (accessToken) {\n//         const decodedToken: Authorization.AccessTokenDecodedBody =\n//           jwtDecode(accessToken);\n//         fetchUser(decodedToken['alganews:user_id']);\n//       }\n//     }\n\n//     identify();\n//   }, [history, fetchUser]);\n\n//   return (\n//     <Switch>\n//       <Route path={'/'} exact component={HomeView} />\n//       <Route path={'/usuarios/cadastro'} exact component={UserCreateView} />\n//       <Route path={'/usuarios/edicao/:id'} exact component={UserEditView} />\n//       <Route path={'/usuarios/:id'} exact component={UserDetailsView} />\n//       <Route path={'/usuarios'} exact component={UserListView} />\n//       <Route path={'/pagamentos'} exact component={PaymentListView} />\n//       <Route\n//         path={'/pagamentos/cadastro'}\n//         exact\n//         component={PaymentCreateView}\n//       />\n//       <Route path={'/pagamentos/:id'} exact component={PaymentDetailsView} />\n//       <Route\n//         path={'/fluxo-de-caixa/despesas'}\n//         exact\n//         component={CashFlowExpensesView}\n//       />\n//       <Route\n//         path={'/fluxo-de-caixa/receitas'}\n//         exact\n//         component={CashFlowRevenuesView}\n//       />\n//     </Switch>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}