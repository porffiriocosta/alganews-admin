{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { CashFlowService } from 'danielbonifacio-sdk';\nimport getThunkStatus from '../utils/getThunkStatus';\nconst initialState = {\n  fetching: false,\n  expenses: [],\n  revenues: []\n};\nexport const getCategories = createAsyncThunk('cash-flow/categories/getCategories', async (_, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    const categories = await CashFlowService.getAllCategories({\n      sort: ['id', 'desc']\n    });\n    /**\n     * utilizando filtro local por que a API não prove uma forma\n     * de recuperar as categorias separadamente por tipo\n     *\n     * @todo: melhorar isso assim que a API prover um endpoint\n     */\n\n    const expensesCategories = categories.filter(c => c.type === 'EXPENSE');\n    const revenuesCategories = categories.filter(c => c.type === 'REVENUE');\n    await dispatch(storeExpenses(expensesCategories));\n    await dispatch(storeRevenues(revenuesCategories));\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const createCategory = createAsyncThunk('cash-flow/categories/createCategory', async (category, {\n  dispatch\n}) => {\n  await CashFlowService.insertNewCategory(category);\n  await dispatch(getCategories());\n});\nexport const deleteCategory = createAsyncThunk('cash-flow/categories/deleteCategory', async (categoryId, {\n  dispatch\n}) => {\n  await CashFlowService.removeExistingCategory(categoryId);\n  await dispatch(getCategories());\n});\nconst entriesCategorySlice = createSlice({\n  initialState,\n  name: 'cash-flow/categories',\n  reducers: {\n    storeExpenses(state, action) {\n      state.expenses = action.payload;\n    },\n\n    storeRevenues(state, action) {\n      state.revenues = action.payload;\n    },\n\n    storeFetching(state, action) {\n      state.fetching = action.payload;\n    }\n\n  },\n\n  extraReducers(builder) {\n    const {\n      error,\n      loading,\n      success\n    } = getThunkStatus([getCategories, createCategory, deleteCategory]);\n    builder.addMatcher(error, state => {\n      state.fetching = false;\n    }).addMatcher(success, state => {\n      state.fetching = false;\n    }).addMatcher(loading, state => {\n      state.fetching = true;\n    });\n  }\n\n});\nexport const {\n  storeExpenses,\n  storeFetching,\n  storeRevenues\n} = entriesCategorySlice.actions;\nconst entriesCategoryReducer = entriesCategorySlice.reducer;\nexport default entriesCategoryReducer;","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/store/EntriesCategory.slice.ts"],"names":["createAsyncThunk","createSlice","CashFlowService","getThunkStatus","initialState","fetching","expenses","revenues","getCategories","_","dispatch","rejectWithValue","categories","getAllCategories","sort","expensesCategories","filter","c","type","revenuesCategories","storeExpenses","storeRevenues","err","createCategory","category","insertNewCategory","deleteCategory","categoryId","removeExistingCategory","entriesCategorySlice","name","reducers","state","action","payload","storeFetching","extraReducers","builder","error","loading","success","addMatcher","actions","entriesCategoryReducer","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CashFlow, CashFlowService } from 'danielbonifacio-sdk';\nimport getThunkStatus from '../utils/getThunkStatus';\n\ninterface EntriesCategoryState {\n  fetching: boolean;\n  expenses: CashFlow.CategorySummary[];\n  revenues: CashFlow.CategorySummary[];\n}\n\nconst initialState: EntriesCategoryState = {\n  fetching: false,\n  expenses: [],\n  revenues: [],\n};\n\nexport const getCategories = createAsyncThunk(\n  'cash-flow/categories/getCategories',\n  async (_, { dispatch, rejectWithValue }) => {\n    try {\n      const categories = await CashFlowService.getAllCategories({\n        sort: ['id', 'desc'],\n      });\n\n      /**\n       * utilizando filtro local por que a API não prove uma forma\n       * de recuperar as categorias separadamente por tipo\n       *\n       * @todo: melhorar isso assim que a API prover um endpoint\n       */\n      const expensesCategories = categories.filter((c) => c.type === 'EXPENSE');\n      const revenuesCategories = categories.filter((c) => c.type === 'REVENUE');\n\n      await dispatch(storeExpenses(expensesCategories));\n      await dispatch(storeRevenues(revenuesCategories));\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const createCategory = createAsyncThunk(\n  'cash-flow/categories/createCategory',\n  async (category: CashFlow.CategoryInput, { dispatch }) => {\n    await CashFlowService.insertNewCategory(category);\n    await dispatch(getCategories());\n  }\n);\n\nexport const deleteCategory = createAsyncThunk(\n  'cash-flow/categories/deleteCategory',\n  async (categoryId: number, { dispatch }) => {\n    await CashFlowService.removeExistingCategory(categoryId);\n    await dispatch(getCategories());\n  }\n);\n\nconst entriesCategorySlice = createSlice({\n  initialState,\n  name: 'cash-flow/categories',\n  reducers: {\n    storeExpenses(state, action: PayloadAction<CashFlow.CategorySummary[]>) {\n      state.expenses = action.payload;\n    },\n    storeRevenues(state, action: PayloadAction<CashFlow.CategorySummary[]>) {\n      state.revenues = action.payload;\n    },\n    storeFetching(state, action: PayloadAction<boolean>) {\n      state.fetching = action.payload;\n    },\n  },\n  extraReducers(builder) {\n    const { error, loading, success } = getThunkStatus([\n      getCategories,\n      createCategory,\n      deleteCategory,\n    ]);\n\n    builder\n      .addMatcher(error, (state) => {\n        state.fetching = false;\n      })\n      .addMatcher(success, (state) => {\n        state.fetching = false;\n      })\n      .addMatcher(loading, (state) => {\n        state.fetching = true;\n      });\n  },\n});\n\nexport const { storeExpenses, storeFetching, storeRevenues } =\n  entriesCategorySlice.actions;\n\nconst entriesCategoryReducer = entriesCategorySlice.reducer;\nexport default entriesCategoryReducer;\n"]},"metadata":{},"sourceType":"module"}