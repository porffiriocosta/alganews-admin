{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { CashFlowService } from 'danielbonifacio-sdk';\nimport moment from 'moment';\nimport getThunkStatus from '../utils/getThunkStatus';\nconst initialState = {\n  list: [],\n  fetching: false,\n  query: {\n    type: 'REVENUE',\n    sort: ['transactedOn', 'desc'],\n    yearMonth: moment().format('YYYY-MM')\n  },\n  selected: []\n};\nexport const getRevenues = createAsyncThunk('cash-flow/revenues/getRevenues', async (_, {\n  getState,\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    const {\n      query\n    } = getState().cashFlow.revenue;\n    const revenues = await CashFlowService.getAllEntries(query);\n    await dispatch(storeList(revenues));\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const createRevenue = createAsyncThunk('cash-flow/revenues/createRevenue', async (revenue, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    await CashFlowService.insertNewEntry(revenue);\n    await dispatch(getRevenues());\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const updateRevenue = createAsyncThunk('cash-flow/revenues/updateRevenue', async ({\n  entry,\n  entryId\n}, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    await CashFlowService.updateExistingEntry(entryId, entry);\n    await dispatch(getRevenues());\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const removeRevenue = createAsyncThunk('cash-flow/revenues/removeRevenue', async (revenueId, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    await CashFlowService.removeExistingEntry(revenueId);\n    await dispatch(getRevenues());\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const removeEntriesInBatch = createAsyncThunk('cash-flow/revenues/removeEntriesInBatch', async (ids, {\n  dispatch\n}) => {\n  await CashFlowService.removeEntriesBatch(ids);\n  await dispatch(getRevenues());\n});\nexport const setQuery = createAsyncThunk('cash-flow/revenues/setQuery', async (query, {\n  dispatch\n}) => {\n  await dispatch(_setQuery(query));\n  await dispatch(getRevenues());\n});\nconst revenueSlice = createSlice({\n  initialState,\n  name: 'cash-flow/revenues',\n  reducers: {\n    storeList(state, action) {\n      state.list = action.payload;\n    },\n\n    setSelectedRevenues(state, action) {\n      state.selected = action.payload;\n    },\n\n    setQuery(state, action) {\n      state.query = { ...state.query,\n        ...action.payload\n      };\n    },\n\n    setFetching(state, action) {\n      state.fetching = action.payload;\n    }\n\n  },\n\n  extraReducers(builder) {\n    const {\n      error,\n      loading,\n      success\n    } = getThunkStatus([getRevenues, removeEntriesInBatch, createRevenue]);\n    builder.addMatcher(error, state => {\n      state.fetching = false;\n    }).addMatcher(success, state => {\n      state.fetching = false;\n    }).addMatcher(loading, state => {\n      state.fetching = true;\n    });\n  }\n\n});\nexport const {\n  storeList,\n  setSelectedRevenues,\n  setQuery: _setQuery,\n  setFetching\n} = revenueSlice.actions;\nconst revenueReducer = revenueSlice.reducer;\nexport default revenueReducer;","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/store/Revenue.slice.ts"],"names":["createAsyncThunk","createSlice","CashFlowService","moment","getThunkStatus","initialState","list","fetching","query","type","sort","yearMonth","format","selected","getRevenues","_","getState","dispatch","rejectWithValue","cashFlow","revenue","revenues","getAllEntries","storeList","err","createRevenue","insertNewEntry","updateRevenue","entry","entryId","updateExistingEntry","removeRevenue","revenueId","removeExistingEntry","removeEntriesInBatch","ids","removeEntriesBatch","setQuery","_setQuery","revenueSlice","name","reducers","state","action","payload","setSelectedRevenues","setFetching","extraReducers","builder","error","loading","success","addMatcher","actions","revenueReducer","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Key } from 'antd/lib/table/interface';\nimport { CashFlow, CashFlowService } from 'danielbonifacio-sdk';\nimport moment from 'moment';\nimport { RootState } from '.';\nimport getThunkStatus from '../utils/getThunkStatus';\n\ninterface RevenueState {\n  list: CashFlow.EntrySummary[];\n  fetching: boolean;\n  query: CashFlow.Query;\n  selected: Key[];\n}\n\nconst initialState: RevenueState = {\n  list: [],\n  fetching: false,\n  query: {\n    type: 'REVENUE',\n    sort: ['transactedOn', 'desc'],\n    yearMonth: moment().format('YYYY-MM'),\n  },\n  selected: [],\n};\n\nexport const getRevenues = createAsyncThunk(\n  'cash-flow/revenues/getRevenues',\n  async (_, { getState, dispatch, rejectWithValue }) => {\n    try {\n      const { query } = (getState() as RootState).cashFlow.revenue;\n      const revenues = await CashFlowService.getAllEntries(query);\n      await dispatch(storeList(revenues));\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const createRevenue = createAsyncThunk(\n  'cash-flow/revenues/createRevenue',\n  async (revenue: CashFlow.EntryInput, { dispatch, rejectWithValue }) => {\n    try {\n      await CashFlowService.insertNewEntry(revenue);\n      await dispatch(getRevenues());\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const updateRevenue = createAsyncThunk(\n  'cash-flow/revenues/updateRevenue',\n  async (\n    { entry, entryId }: { entry: CashFlow.EntryInput; entryId: number },\n    { dispatch, rejectWithValue }\n  ) => {\n    try {\n      await CashFlowService.updateExistingEntry(entryId, entry);\n      await dispatch(getRevenues());\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const removeRevenue = createAsyncThunk(\n  'cash-flow/revenues/removeRevenue',\n  async (revenueId: number, { dispatch, rejectWithValue }) => {\n    try {\n      await CashFlowService.removeExistingEntry(revenueId);\n      await dispatch(getRevenues());\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const removeEntriesInBatch = createAsyncThunk(\n  'cash-flow/revenues/removeEntriesInBatch',\n  async (ids: number[], { dispatch }) => {\n    await CashFlowService.removeEntriesBatch(ids);\n    await dispatch(getRevenues());\n  }\n);\n\nexport const setQuery = createAsyncThunk(\n  'cash-flow/revenues/setQuery',\n  async (query: Partial<CashFlow.Query>, { dispatch }) => {\n    await dispatch(_setQuery(query));\n    await dispatch(getRevenues());\n  }\n);\n\nconst revenueSlice = createSlice({\n  initialState,\n  name: 'cash-flow/revenues',\n  reducers: {\n    storeList(state, action: PayloadAction<CashFlow.EntrySummary[]>) {\n      state.list = action.payload;\n    },\n    setSelectedRevenues(state, action: PayloadAction<Key[]>) {\n      state.selected = action.payload;\n    },\n    setQuery(state, action: PayloadAction<Partial<CashFlow.Query>>) {\n      state.query = {\n        ...state.query,\n        ...action.payload,\n      };\n    },\n    setFetching(state, action: PayloadAction<boolean>) {\n      state.fetching = action.payload;\n    },\n  },\n  extraReducers(builder) {\n    const { error, loading, success } = getThunkStatus([\n      getRevenues,\n      removeEntriesInBatch,\n      createRevenue,\n    ]);\n\n    builder\n      .addMatcher(error, (state) => {\n        state.fetching = false;\n      })\n      .addMatcher(success, (state) => {\n        state.fetching = false;\n      })\n      .addMatcher(loading, (state) => {\n        state.fetching = true;\n      });\n  },\n});\n\nexport const {\n  storeList,\n  setSelectedRevenues,\n  setQuery: _setQuery,\n  setFetching,\n} = revenueSlice.actions;\n\nconst revenueReducer = revenueSlice.reducer;\nexport default revenueReducer;\n"]},"metadata":{},"sourceType":"module"}