{"ast":null,"code":"import{combineReducers,configureStore,isRejected}from'@reduxjs/toolkit';import{notification}from'antd';import PaymentReducer from'./Payment.slice';import UserReducer from'./User.reducer';import expenseReducer from'./Expense.slice';import revenueReducer from'./Revenue.slice';import entriesCategoryReducer from'./EntriesCategory.slice';import authReducer from'./Auth.slice';import uiReducer from'./UI.slice';var observeActions=function observeActions(){return function(next){return function(action){if(isRejected(action)){var ignoredActions=['cash-flow/categories/createCategory/rejected','cash-flow/categories/deleteCategory/rejected','cash-flow/expenses/createExpense/rejected','cash-flow/revenues/createRevenue/rejected','user/getAllUsers/rejected'];var shouldNotify=!ignoredActions.includes(action.type);var message=action.meta.rejectedWithValue?action.payload.message:action.error.message;if(shouldNotify){notification.error({message:message});}}next(action);};};};var cashFlowReducer=combineReducers({expense:expenseReducer,revenue:revenueReducer,category:entriesCategoryReducer});export var store=configureStore({reducer:{user:UserReducer,payment:PaymentReducer,cashFlow:cashFlowReducer,auth:authReducer,ui:uiReducer},middleware:function middleware(getDefaultMiddlewares){return getDefaultMiddlewares().concat(observeActions);}});","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/store/index.ts"],"names":["combineReducers","configureStore","isRejected","notification","PaymentReducer","UserReducer","expenseReducer","revenueReducer","entriesCategoryReducer","authReducer","uiReducer","observeActions","next","action","ignoredActions","shouldNotify","includes","type","message","meta","rejectedWithValue","payload","error","cashFlowReducer","expense","revenue","category","store","reducer","user","payment","cashFlow","auth","ui","middleware","getDefaultMiddlewares","concat"],"mappings":"AAAA,OACEA,eADF,CAEEC,cAFF,CAGEC,UAHF,KAKO,kBALP,CAMA,OAASC,YAAT,KAA6B,MAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,iBAA3B,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,iBAA3B,CACA,MAAOC,CAAAA,cAAP,KAA2B,iBAA3B,CACA,MAAOC,CAAAA,sBAAP,KAAmC,yBAAnC,CACA,MAAOC,CAAAA,WAAP,KAAwB,cAAxB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CAEA,GAAMC,CAAAA,cAA0B,CAAG,QAA7BA,CAAAA,cAA6B,SAAM,UAACC,IAAD,QAAU,UAACC,MAAD,CAAY,CAC7D,GAAIX,UAAU,CAACW,MAAD,CAAd,CAAwB,CACtB,GAAMC,CAAAA,cAAc,CAAG,CACrB,8CADqB,CAErB,8CAFqB,CAGrB,2CAHqB,CAIrB,2CAJqB,CAKrB,2BALqB,CAAvB,CAQA,GAAMC,CAAAA,YAAY,CAAG,CAACD,cAAc,CAACE,QAAf,CAAwBH,MAAM,CAACI,IAA/B,CAAtB,CACA,GAAMC,CAAAA,OAAO,CAAGL,MAAM,CAACM,IAAP,CAAYC,iBAAZ,CACZP,MAAM,CAACQ,OAAP,CAAeH,OADH,CAEZL,MAAM,CAACS,KAAP,CAAaJ,OAFjB,CAIA,GAAIH,YAAJ,CAAkB,CAChBZ,YAAY,CAACmB,KAAb,CAAmB,CACjBJ,OAAO,CAAPA,OADiB,CAAnB,EAGD,CACF,CAEDN,IAAI,CAACC,MAAD,CAAJ,CACD,CAvBwC,EAAN,EAAnC,CAyBA,GAAMU,CAAAA,eAAe,CAAGvB,eAAe,CAAC,CACtCwB,OAAO,CAAElB,cAD6B,CAEtCmB,OAAO,CAAElB,cAF6B,CAGtCmB,QAAQ,CAAElB,sBAH4B,CAAD,CAAvC,CAMA,MAAO,IAAMmB,CAAAA,KAAK,CAAG1B,cAAc,CAAC,CAClC2B,OAAO,CAAE,CACPC,IAAI,CAAExB,WADC,CAEPyB,OAAO,CAAE1B,cAFF,CAGP2B,QAAQ,CAAER,eAHH,CAIPS,IAAI,CAAEvB,WAJC,CAKPwB,EAAE,CAAEvB,SALG,CADyB,CAQlCwB,UAAU,CAAE,oBAAUC,qBAAV,CAAiC,CAC3C,MAAOA,CAAAA,qBAAqB,GAAGC,MAAxB,CAA+BzB,cAA/B,CAAP,CACD,CAViC,CAAD,CAA5B","sourcesContent":["import {\n  combineReducers,\n  configureStore,\n  isRejected,\n  Middleware,\n} from '@reduxjs/toolkit';\nimport { notification } from 'antd';\nimport PaymentReducer from './Payment.slice';\nimport UserReducer from './User.reducer';\nimport expenseReducer from './Expense.slice';\nimport revenueReducer from './Revenue.slice';\nimport entriesCategoryReducer from './EntriesCategory.slice';\nimport authReducer from './Auth.slice';\nimport uiReducer from './UI.slice';\n\nconst observeActions: Middleware = () => (next) => (action) => {\n  if (isRejected(action)) {\n    const ignoredActions = [\n      'cash-flow/categories/createCategory/rejected',\n      'cash-flow/categories/deleteCategory/rejected',\n      'cash-flow/expenses/createExpense/rejected',\n      'cash-flow/revenues/createRevenue/rejected',\n      'user/getAllUsers/rejected',\n    ];\n\n    const shouldNotify = !ignoredActions.includes(action.type);\n    const message = action.meta.rejectedWithValue\n      ? action.payload.message\n      : action.error.message;\n\n    if (shouldNotify) {\n      notification.error({\n        message,\n      });\n    }\n  }\n\n  next(action);\n};\n\nconst cashFlowReducer = combineReducers({\n  expense: expenseReducer,\n  revenue: revenueReducer,\n  category: entriesCategoryReducer,\n});\n\nexport const store = configureStore({\n  reducer: {\n    user: UserReducer,\n    payment: PaymentReducer,\n    cashFlow: cashFlowReducer,\n    auth: authReducer,\n    ui: uiReducer,\n  },\n  middleware: function (getDefaultMiddlewares) {\n    return getDefaultMiddlewares().concat(observeActions);\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}