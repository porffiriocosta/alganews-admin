{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { PaymentService } from 'danielbonifacio-sdk';\nimport { ResourceNotFoundError } from 'danielbonifacio-sdk/dist/errors';\nimport { useCallback } from 'react';\nimport { useState } from 'react';\nexport default function usePayment() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [payment, setPayment] = useState();\n  const [paymentPreview, setPaymentPreview] = useState();\n  const [fetchingPosts, setFetchingPosts] = useState(false);\n  const [fetchingPayment, setFetchingPayment] = useState(false);\n  const [approvingPayment, setApprovingPayment] = useState(false);\n  const [fetchingPaymentPreview, setFetchingPaymentPreview] = useState(false);\n  const [schedulingPayment, setSchedulingPayment] = useState(false);\n  const [paymentNotFound, setPaymentNotFound] = useState(false);\n  const [postsNotFound, setPostsNotFound] = useState(false);\n  const fetchPayment = useCallback(async paymentId => {\n    try {\n      setFetchingPayment(true);\n      const payment = await PaymentService.getExistingPayment(paymentId);\n      setPayment(payment);\n    } catch (error) {\n      if (error instanceof ResourceNotFoundError) {\n        setPaymentNotFound(true);\n        return;\n      }\n\n      throw error;\n    } finally {\n      setFetchingPayment(false);\n    }\n  }, []);\n  const approvePayment = useCallback(async paymentId => {\n    try {\n      setApprovingPayment(true);\n      await PaymentService.approvePayment(paymentId);\n    } finally {\n      setApprovingPayment(false);\n    }\n  }, []);\n  const fetchPosts = useCallback(async paymentId => {\n    try {\n      setFetchingPosts(true);\n      const posts = await PaymentService.getExistingPaymentPosts(paymentId);\n      setPosts(posts);\n    } catch (error) {\n      if (error instanceof ResourceNotFoundError) {\n        setPostsNotFound(true);\n        return;\n      }\n\n      throw error;\n    } finally {\n      setFetchingPosts(false);\n    }\n  }, []);\n  const fetchPaymentPreview = useCallback(async paymentPreview => {\n    try {\n      setFetchingPaymentPreview(true);\n      const preview = await PaymentService.getPaymentPreview(paymentPreview);\n      setPaymentPreview(preview);\n    } finally {\n      setFetchingPaymentPreview(false);\n    }\n  }, []);\n  const schedulePayment = useCallback(async paymentInput => {\n    try {\n      setSchedulingPayment(true);\n      await PaymentService.insertNewPayment(paymentInput);\n    } finally {\n      setSchedulingPayment(false);\n    }\n  }, []);\n  const clearPaymentPreview = useCallback(() => {\n    setPaymentPreview(undefined);\n  }, []);\n  return {\n    fetchPayment,\n    fetchPosts,\n    approvePayment,\n    fetchPaymentPreview,\n    fetchingPayment,\n    fetchingPosts,\n    approvingPayment,\n    fetchingPaymentPreview,\n    paymentNotFound,\n    postsNotFound,\n    posts,\n    payment,\n    paymentPreview,\n    clearPaymentPreview,\n    schedulePayment,\n    schedulingPayment\n  };\n}\n\n_s(usePayment, \"r2XX4B5PkteU3kyZM36v9Ldbzc8=\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/hooks/usePayment.ts"],"names":["PaymentService","ResourceNotFoundError","useCallback","useState","usePayment","posts","setPosts","payment","setPayment","paymentPreview","setPaymentPreview","fetchingPosts","setFetchingPosts","fetchingPayment","setFetchingPayment","approvingPayment","setApprovingPayment","fetchingPaymentPreview","setFetchingPaymentPreview","schedulingPayment","setSchedulingPayment","paymentNotFound","setPaymentNotFound","postsNotFound","setPostsNotFound","fetchPayment","paymentId","getExistingPayment","error","approvePayment","fetchPosts","getExistingPaymentPosts","fetchPaymentPreview","preview","getPaymentPreview","schedulePayment","paymentInput","insertNewPayment","clearPaymentPreview","undefined"],"mappings":"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","sourcesContent":["import { Payment, PaymentService, Post } from 'danielbonifacio-sdk';\nimport { ResourceNotFoundError } from 'danielbonifacio-sdk/dist/errors';\nimport { useCallback } from 'react';\nimport { useState } from 'react';\n\nexport default function usePayment() {\n  const [posts, setPosts] = useState<Post.WithEarnings[]>([]);\n  const [payment, setPayment] = useState<Payment.Detailed>();\n  const [paymentPreview, setPaymentPreview] = useState<Payment.Preview>();\n\n  const [fetchingPosts, setFetchingPosts] = useState(false);\n  const [fetchingPayment, setFetchingPayment] = useState(false);\n  const [approvingPayment, setApprovingPayment] = useState(false);\n  const [fetchingPaymentPreview, setFetchingPaymentPreview] = useState(false);\n  const [schedulingPayment, setSchedulingPayment] = useState(false);\n\n  const [paymentNotFound, setPaymentNotFound] = useState(false);\n  const [postsNotFound, setPostsNotFound] = useState(false);\n\n  const fetchPayment = useCallback(async (paymentId: number) => {\n    try {\n      setFetchingPayment(true);\n      const payment = await PaymentService.getExistingPayment(paymentId);\n      setPayment(payment);\n    } catch (error) {\n      if (error instanceof ResourceNotFoundError) {\n        setPaymentNotFound(true);\n        return;\n      }\n      throw error;\n    } finally {\n      setFetchingPayment(false);\n    }\n  }, []);\n\n  const approvePayment = useCallback(async (paymentId: number) => {\n    try {\n      setApprovingPayment(true);\n      await PaymentService.approvePayment(paymentId);\n    } finally {\n      setApprovingPayment(false);\n    }\n  }, []);\n\n  const fetchPosts = useCallback(async (paymentId: number) => {\n    try {\n      setFetchingPosts(true);\n      const posts = await PaymentService.getExistingPaymentPosts(paymentId);\n      setPosts(posts);\n    } catch (error) {\n      if (error instanceof ResourceNotFoundError) {\n        setPostsNotFound(true);\n        return;\n      }\n      throw error;\n    } finally {\n      setFetchingPosts(false);\n    }\n  }, []);\n\n  const fetchPaymentPreview = useCallback(\n    async (paymentPreview: Payment.PreviewInput) => {\n      try {\n        setFetchingPaymentPreview(true);\n        const preview = await PaymentService.getPaymentPreview(paymentPreview);\n        setPaymentPreview(preview);\n      } finally {\n        setFetchingPaymentPreview(false);\n      }\n    },\n    []\n  );\n\n  const schedulePayment = useCallback(async (paymentInput: Payment.Input) => {\n    try {\n      setSchedulingPayment(true);\n      await PaymentService.insertNewPayment(paymentInput);\n    } finally {\n      setSchedulingPayment(false);\n    }\n  }, []);\n\n  const clearPaymentPreview = useCallback(() => {\n    setPaymentPreview(undefined);\n  }, []);\n\n  return {\n    fetchPayment,\n    fetchPosts,\n    approvePayment,\n    fetchPaymentPreview,\n    fetchingPayment,\n    fetchingPosts,\n    approvingPayment,\n    fetchingPaymentPreview,\n    paymentNotFound,\n    postsNotFound,\n    posts,\n    payment,\n    paymentPreview,\n    clearPaymentPreview,\n    schedulePayment,\n    schedulingPayment,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}