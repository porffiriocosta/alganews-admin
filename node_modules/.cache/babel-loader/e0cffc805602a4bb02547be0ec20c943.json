{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-admin\\\\src\\\\app\\\\features\\\\UserForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Col, Form, Input, Row, Avatar, DatePicker, Divider, Select, Tabs, Upload, Button, notification } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { FileService, UserService } from 'danielbonifacio-sdk';\nimport { UserOutlined } from '@ant-design/icons';\nimport ImageCrop from 'antd-img-crop';\nimport CustomError from 'danielbonifacio-sdk/dist/CustomError';\nimport MaskedInput from 'antd-mask-input';\nimport { useHistory } from 'react-router-dom';\nimport CurrencyInput from '../components/CurrencyInput';\nimport useAuth from '../../core/hooks/useAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  TabPane\n} = Tabs;\nexport default function UserForm(props) {\n  _s();\n\n  var _props$user, _props$user2, _props$user3, _props$user4, _props$user5;\n\n  const history = useHistory();\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [avatar, setAvatar] = useState(((_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.avatarUrls.default) || '');\n  const [activeTab, setActiveTab] = useState('personal');\n  const {\n    user: authenticatedUser\n  } = useAuth();\n  const [isEditorRole, setIsEditorRole] = useState(((_props$user2 = props.user) === null || _props$user2 === void 0 ? void 0 : _props$user2.role) === 'EDITOR');\n  const handleAvatarUpload = useCallback(async file => {\n    const avatarSource = await FileService.upload(file);\n    setAvatar(avatarSource);\n  }, []);\n  useEffect(() => {\n    form.setFieldsValue({\n      avatarUrl: avatar || undefined\n    });\n  }, [avatar, form]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    autoComplete: 'off',\n    layout: 'vertical',\n    onFinishFailed: fields => {\n      let bankAccountErrors = 0;\n      let personalDataErrors = 0;\n      fields.errorFields.forEach(({\n        name\n      }) => {\n        if (name.includes('bankAccount')) bankAccountErrors++;\n        if (name.includes('location') || name.includes('skills') || name.includes('phone') || name.includes('taxpayerId') || name.includes('pricePerWord')) personalDataErrors++;\n      });\n\n      if (bankAccountErrors > personalDataErrors) {\n        setActiveTab('bankAccount');\n      }\n\n      if (personalDataErrors > bankAccountErrors) {\n        setActiveTab('personal');\n      }\n    },\n    onFinish: async user => {\n      setLoading(true);\n      console.log(user);\n      const userDTO = { ...user,\n        phone: user.phone.replace(/\\D/g, ''),\n        taxpayerId: user.taxpayerId.replace(/\\D/g, '')\n      };\n      if (props.user) return props.onUpdate && props.onUpdate(userDTO).finally(() => {\n        setLoading(false);\n      });\n\n      try {\n        await UserService.insertNewUser(userDTO);\n        history.push('/usuarios');\n        notification.success({\n          message: 'Sucesso',\n          description: 'usuário criado com sucesso'\n        });\n      } catch (error) {\n        console.log(error);\n\n        if (error instanceof CustomError) {\n          var _error$data;\n\n          if ((_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.objects) {\n            form.setFields(error.data.objects.map(error => {\n              var _error$name;\n\n              return {\n                name: (_error$name = error.name) === null || _error$name === void 0 ? void 0 : _error$name.split(/(\\.|\\[|\\])/gi).filter(str => str !== '.' && str !== '[' && str !== ']' && str !== '').map(str => isNaN(Number(str)) ? str : Number(str)),\n                errors: [error.userMessage]\n              };\n            }));\n          } else {\n            var _error$data2, _error$data3;\n\n            notification.error({\n              message: error.message,\n              description: ((_error$data2 = error.data) === null || _error$data2 === void 0 ? void 0 : _error$data2.detail) === 'Network Error' ? 'Erro na rede' : (_error$data3 = error.data) === null || _error$data3 === void 0 ? void 0 : _error$data3.detail\n            });\n          }\n        } else {\n          notification.error({\n            message: 'Houve um erro'\n          });\n        }\n      } finally {\n        setLoading(false);\n      }\n    },\n    initialValues: props.user,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      gutter: 24,\n      align: 'middle',\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          justify: 'center',\n          children: [/*#__PURE__*/_jsxDEV(ImageCrop, {\n            rotate: true,\n            shape: 'round',\n            grid: true,\n            aspect: 1,\n            children: /*#__PURE__*/_jsxDEV(Upload, {\n              maxCount: 1,\n              onRemove: () => {\n                setAvatar('');\n              },\n              beforeUpload: file => {\n                handleAvatarUpload(file);\n                return false;\n              },\n              fileList: [...(avatar ? [{\n                name: 'Avatar',\n                uid: ''\n              }] : [])],\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                style: {\n                  cursor: 'pointer'\n                },\n                icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 25\n                }, this),\n                src: avatar,\n                size: 128\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: 'avatarUrl',\n            hidden: true,\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              hidden: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 8,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: 'Nome',\n          name: 'name',\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }, {\n            max: 255,\n            message: `O nome não pode ter mais de 255 caracteres`\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: 'E.g.: João Silva'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: 'Data de nascimento',\n          name: 'birthdate',\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }],\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            style: {\n              width: '100%'\n            },\n            format: 'DD/MM/YYYY'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 12,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: 'Bio',\n          name: 'bio',\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }, {\n            max: 255,\n            message: `A biografia não pode ter mais de 255 caracteres`\n          }, {\n            min: 10,\n            message: `A biografia não pode ter menos de 10 caracteres`\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n            rows: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 12,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: 'Perfil',\n          name: 'role',\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }, {\n            type: 'enum',\n            enum: ['EDITOR', 'ASSISTANT', 'MANAGER'],\n            message: `O Perfil precisar ser editor, assitente ou gerente`\n          }],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            disabled: props.user && !((_props$user3 = props.user) === null || _props$user3 === void 0 ? void 0 : _props$user3.canSensitiveDataBeUpdated),\n            onChange: value => {\n              setIsEditorRole(value === 'EDITOR');\n            },\n            placeholder: 'Selecione um perfil',\n            children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n              value: 'EDITOR',\n              children: \"Editor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: 'ASSISTANT',\n              children: \"Assistente\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: 'MANAGER',\n              disabled: (authenticatedUser === null || authenticatedUser === void 0 ? void 0 : authenticatedUser.role) !== 'MANAGER',\n              children: \"Gerente\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 12,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: 'Email',\n          name: 'email',\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }, {\n            max: 255,\n            message: `O email não pode ter mais de 255 caracteres`\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"email\",\n            disabled: props.user && !((_props$user4 = props.user) === null || _props$user4 === void 0 ? void 0 : _props$user4.canSensitiveDataBeUpdated),\n            placeholder: 'E.g.: contato@joao.silva'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: 24,\n        children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: 24,\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          defaultActiveKey: 'personal',\n          activeKey: activeTab,\n          onChange: tab => setActiveTab(tab),\n          children: [/*#__PURE__*/_jsxDEV(TabPane, {\n            tab: 'Dados pessoais',\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              gutter: 24,\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'País',\n                  name: ['location', 'country'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 50,\n                    message: `O país não pode ter mais de 50 caracteres`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: 'E.g.: Brasil'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Estado',\n                  name: ['location', 'state'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 50,\n                    message: `O estado não pode ter mais de 50 caracteres`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: 'E.g.: Espírito Santo'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Cidade',\n                  name: ['location', 'city'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 255,\n                    message: `A cidade não pode ter mais de 255 caracteres`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: 'E.g.: Vitória'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Telefone',\n                  name: 'phone',\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 20,\n                    message: `O telefone não pode ter mais de 20 caracteres`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(MaskedInput, {\n                    mask: \"(11) 11111-1111\",\n                    placeholder: '(27) 99999-0000',\n                    disabled: props.user && !((_props$user5 = props.user) === null || _props$user5 === void 0 ? void 0 : _props$user5.canSensitiveDataBeUpdated)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 389,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'CPF',\n                  name: 'taxpayerId',\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 14,\n                    message: `O CPF não pode ter mais de 14 caracteres`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(MaskedInput, {\n                    mask: \"111.111.111-11\",\n                    placeholder: '111.222.333-44'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 17\n              }, this), isEditorRole && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  xs: 24,\n                  lg: 8,\n                  children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                    label: 'Preço por palavra',\n                    name: 'pricePerWord',\n                    rules: [{\n                      required: true,\n                      message: 'O campo é obrigatório'\n                    }, {\n                      type: 'number',\n                      min: 0.01,\n                      message: 'O valor mínimo é 1 centavo'\n                    }],\n                    children: /*#__PURE__*/_jsxDEV(CurrencyInput, {\n                      onChange: (e, value) => {\n                        form.setFieldsValue({\n                          pricePerWord: value\n                        });\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 437,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 422,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 421,\n                  columnNumber: 21\n                }, this), [1, 2, 3].map((_, index) => {\n                  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(Col, {\n                      xs: 18,\n                      lg: 6,\n                      children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                        label: 'Habilidade',\n                        name: ['skills', index, 'name'],\n                        rules: [{\n                          required: true,\n                          message: 'O campo é obrigatório'\n                        }, {\n                          max: 50,\n                          message: `A habilidade não pode ter mais de 50 caracteres`\n                        }],\n                        children: /*#__PURE__*/_jsxDEV(Input, {\n                          placeholder: 'E.g.: JavaScript'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 464,\n                          columnNumber: 31\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 450,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(Col, {\n                      xs: 6,\n                      lg: 2,\n                      children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                        label: '%',\n                        name: ['skills', index, 'percentage'],\n                        rules: [{\n                          required: true,\n                          message: ''\n                        }, {\n                          async validator(field, value) {\n                            if (isNaN(Number(value))) throw new Error('Apenas números');\n                            if (Number(value) > 100) throw new Error('Máximo é 100');\n                            if (Number(value) < 0) throw new Error('Mínimo é 0');\n                          }\n\n                        }],\n                        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 488,\n                          columnNumber: 31\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 468,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 467,\n                      columnNumber: 27\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 25\n                  }, this);\n                })]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this)\n          }, 'personal', false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TabPane, {\n            tab: 'Dados bancários',\n            forceRender: true,\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              gutter: 24,\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Instituição',\n                  name: ['bankAccount', 'bankCode'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 3,\n                    message: `A instituição precisa ter 3 caracteres`\n                  }, {\n                    min: 3,\n                    message: `A instituição precisa ter 3 caracteres`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: '260'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 519,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 501,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 500,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Agência',\n                  name: ['bankAccount', 'agency'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 10,\n                    message: `A agência precisa ter no máximo 10 caracteres`\n                  }, {\n                    min: 1,\n                    message: `A agência precisa ter no mínimo 1 caractere`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: '0001'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 541,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 523,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Conta sem dígito',\n                  name: ['bankAccount', 'number'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: '12345'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 555,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 545,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Dígito',\n                  name: ['bankAccount', 'digit'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }, {\n                    max: 1,\n                    message: `O dígito precisa ser único`\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Input, {\n                    placeholder: '1'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 573,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                xs: 24,\n                lg: 8,\n                children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                  label: 'Tipo de conta',\n                  name: ['bankAccount', 'type'],\n                  rules: [{\n                    required: true,\n                    message: 'O campo é obrigatório'\n                  }],\n                  children: /*#__PURE__*/_jsxDEV(Select, {\n                    placeholder: 'Selecione o tipo de conta',\n                    children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n                      value: 'SAVING',\n                      children: \"Conta poupan\\xE7a\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 588,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n                      value: 'CHECKING',\n                      children: \"Conta corrente\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 591,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 587,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 577,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this)\n          }, 'bankAccount', false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          justify: 'end',\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            loading: loading,\n            type: 'primary',\n            htmlType: 'submit',\n            children: props.user ? 'Atualizar usuário' : 'Cadastrar usuário'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserForm, \"lK/VHanIz5Oj91uI3Vyr9sg88Ec=\", false, function () {\n  return [useHistory, Form.useForm, useAuth];\n});\n\n_c = UserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserForm\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/app/features/UserForm.tsx"],"names":["Col","Form","Input","Row","Avatar","DatePicker","Divider","Select","Tabs","Upload","Button","notification","React","useCallback","useEffect","useState","FileService","UserService","UserOutlined","ImageCrop","CustomError","MaskedInput","useHistory","CurrencyInput","useAuth","TabPane","UserForm","props","history","form","useForm","loading","setLoading","avatar","setAvatar","user","avatarUrls","default","activeTab","setActiveTab","authenticatedUser","isEditorRole","setIsEditorRole","role","handleAvatarUpload","file","avatarSource","upload","setFieldsValue","avatarUrl","undefined","fields","bankAccountErrors","personalDataErrors","errorFields","forEach","name","includes","console","log","userDTO","phone","replace","taxpayerId","onUpdate","finally","insertNewUser","push","success","message","description","error","data","objects","setFields","map","split","filter","str","isNaN","Number","errors","userMessage","detail","uid","cursor","required","max","width","min","type","enum","canSensitiveDataBeUpdated","value","tab","e","pricePerWord","_","index","validator","field","Error"],"mappings":"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","sourcesContent":["import {\n  Col,\n  Form,\n  Input,\n  Row,\n  Avatar,\n  DatePicker,\n  Divider,\n  Select,\n  Tabs,\n  Upload,\n  Button,\n  notification,\n} from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { FileService, User, UserService } from 'danielbonifacio-sdk';\nimport { UserOutlined } from '@ant-design/icons';\nimport ImageCrop from 'antd-img-crop';\nimport CustomError from 'danielbonifacio-sdk/dist/CustomError';\nimport MaskedInput from 'antd-mask-input';\nimport { Moment } from 'moment';\nimport { useHistory } from 'react-router-dom';\nimport CurrencyInput from '../components/CurrencyInput';\nimport useAuth from '../../core/hooks/useAuth';\nconst { TabPane } = Tabs;\n\ntype UserFormType = {\n  createdAt: Moment;\n  updatedAt: Moment;\n  birthdate: Moment;\n} & Omit<User.Detailed, 'createdAt' | 'updatedAt' | 'birthdate'>;\n\ninterface UserFormProps {\n  user?: UserFormType;\n  onUpdate?: (user: User.Input) => Promise<any>;\n}\n\nexport default function UserForm(props: UserFormProps) {\n  const history = useHistory();\n  const [form] = Form.useForm<User.Input>();\n  const [loading, setLoading] = useState(false);\n\n  const [avatar, setAvatar] = useState(props.user?.avatarUrls.default || '');\n  const [activeTab, setActiveTab] = useState<'personal' | 'bankAccount'>(\n    'personal'\n  );\n\n  const { user: authenticatedUser } = useAuth();\n\n  const [isEditorRole, setIsEditorRole] = useState(\n    props.user?.role === 'EDITOR'\n  );\n\n  const handleAvatarUpload = useCallback(async (file: File) => {\n    const avatarSource = await FileService.upload(file);\n    setAvatar(avatarSource);\n  }, []);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      avatarUrl: avatar || undefined,\n    });\n  }, [avatar, form]);\n\n  return (\n    <Form\n      form={form}\n      autoComplete={'off'}\n      layout={'vertical'}\n      onFinishFailed={(fields) => {\n        let bankAccountErrors = 0;\n        let personalDataErrors = 0;\n\n        fields.errorFields.forEach(({ name }) => {\n          if (name.includes('bankAccount')) bankAccountErrors++;\n          if (\n            name.includes('location') ||\n            name.includes('skills') ||\n            name.includes('phone') ||\n            name.includes('taxpayerId') ||\n            name.includes('pricePerWord')\n          )\n            personalDataErrors++;\n        });\n\n        if (bankAccountErrors > personalDataErrors) {\n          setActiveTab('bankAccount');\n        }\n        if (personalDataErrors > bankAccountErrors) {\n          setActiveTab('personal');\n        }\n      }}\n      onFinish={async (user: User.Input) => {\n        setLoading(true);\n        console.log(user);\n        const userDTO: User.Input = {\n          ...user,\n          phone: user.phone.replace(/\\D/g, ''),\n          taxpayerId: user.taxpayerId.replace(/\\D/g, ''),\n        };\n\n        if (props.user)\n          return (\n            props.onUpdate &&\n            props.onUpdate(userDTO).finally(() => {\n              setLoading(false);\n            })\n          );\n\n        try {\n          await UserService.insertNewUser(userDTO);\n          history.push('/usuarios');\n          notification.success({\n            message: 'Sucesso',\n            description: 'usuário criado com sucesso',\n          });\n        } catch (error) {\n          console.log(error);\n          if (error instanceof CustomError) {\n            if (error.data?.objects) {\n              form.setFields(\n                error.data.objects.map((error) => {\n                  return {\n                    name: error.name\n                      ?.split(/(\\.|\\[|\\])/gi)\n                      .filter(\n                        (str) =>\n                          str !== '.' &&\n                          str !== '[' &&\n                          str !== ']' &&\n                          str !== ''\n                      )\n                      .map((str) =>\n                        isNaN(Number(str)) ? str : Number(str)\n                      ) as string[],\n                    errors: [error.userMessage],\n                  };\n                })\n              );\n            } else {\n              notification.error({\n                message: error.message,\n                description:\n                  error.data?.detail === 'Network Error'\n                    ? 'Erro na rede'\n                    : error.data?.detail,\n              });\n            }\n          } else {\n            notification.error({\n              message: 'Houve um erro',\n            });\n          }\n        } finally {\n          setLoading(false);\n        }\n      }}\n      initialValues={props.user}\n    >\n      <Row gutter={24} align={'middle'}>\n        <Col xs={24} lg={4}>\n          <Row justify={'center'}>\n            <ImageCrop rotate shape={'round'} grid aspect={1}>\n              <Upload\n                maxCount={1}\n                onRemove={() => {\n                  setAvatar('');\n                }}\n                beforeUpload={(file) => {\n                  handleAvatarUpload(file);\n                  return false;\n                }}\n                fileList={[\n                  ...(avatar\n                    ? [\n                        {\n                          name: 'Avatar',\n                          uid: '',\n                        },\n                      ]\n                    : []),\n                ]}\n              >\n                <Avatar\n                  style={{ cursor: 'pointer' }}\n                  icon={<UserOutlined />}\n                  src={avatar}\n                  size={128}\n                />\n              </Upload>\n            </ImageCrop>\n            <Form.Item name={'avatarUrl'} hidden>\n              <Input hidden />\n            </Form.Item>\n          </Row>\n        </Col>\n        <Col xs={24} lg={8}>\n          <Form.Item\n            label={'Nome'}\n            name={'name'}\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n              {\n                max: 255,\n                message: `O nome não pode ter mais de 255 caracteres`,\n              },\n            ]}\n          >\n            <Input placeholder={'E.g.: João Silva'} />\n          </Form.Item>\n          <Form.Item\n            label={'Data de nascimento'}\n            name={'birthdate'}\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n            ]}\n          >\n            <DatePicker style={{ width: '100%' }} format={'DD/MM/YYYY'} />\n          </Form.Item>\n        </Col>\n        <Col xs={24} lg={12}>\n          <Form.Item\n            label={'Bio'}\n            name={'bio'}\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n              {\n                max: 255,\n                message: `A biografia não pode ter mais de 255 caracteres`,\n              },\n              {\n                min: 10,\n                message: `A biografia não pode ter menos de 10 caracteres`,\n              },\n            ]}\n          >\n            <Input.TextArea rows={5} />\n          </Form.Item>\n        </Col>\n        <Col xs={24}>\n          <Divider />\n        </Col>\n        <Col xs={24} lg={12}>\n          <Form.Item\n            label={'Perfil'}\n            name={'role'}\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n              {\n                type: 'enum',\n                enum: ['EDITOR', 'ASSISTANT', 'MANAGER'],\n                message: `O Perfil precisar ser editor, assitente ou gerente`,\n              },\n            ]}\n          >\n            <Select\n              disabled={props.user && !props.user?.canSensitiveDataBeUpdated}\n              onChange={(value) => {\n                setIsEditorRole(value === 'EDITOR');\n              }}\n              placeholder={'Selecione um perfil'}\n            >\n              <Select.Option value={'EDITOR'}>Editor</Select.Option>\n              <Select.Option value={'ASSISTANT'}>Assistente</Select.Option>\n              <Select.Option\n                value={'MANAGER'}\n                disabled={authenticatedUser?.role !== 'MANAGER'}\n              >\n                Gerente\n              </Select.Option>\n            </Select>\n          </Form.Item>\n        </Col>\n        <Col xs={24} lg={12}>\n          <Form.Item\n            label={'Email'}\n            name={'email'}\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n              {\n                max: 255,\n                message: `O email não pode ter mais de 255 caracteres`,\n              },\n            ]}\n          >\n            <Input\n              type='email'\n              disabled={props.user && !props.user?.canSensitiveDataBeUpdated}\n              placeholder={'E.g.: contato@joao.silva'}\n            />\n          </Form.Item>\n        </Col>\n        <Col sm={24}>\n          <Divider />\n        </Col>\n\n        <Col sm={24}>\n          <Tabs\n            defaultActiveKey={'personal'}\n            activeKey={activeTab}\n            onChange={(tab) => setActiveTab(tab as 'personal' | 'bankAccount')}\n          >\n            <TabPane key={'personal'} tab={'Dados pessoais'}>\n              <Row gutter={24}>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'País'}\n                    name={['location', 'country']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 50,\n                        message: `O país não pode ter mais de 50 caracteres`,\n                      },\n                    ]}\n                  >\n                    <Input placeholder={'E.g.: Brasil'} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Estado'}\n                    name={['location', 'state']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 50,\n                        message: `O estado não pode ter mais de 50 caracteres`,\n                      },\n                    ]}\n                  >\n                    <Input placeholder={'E.g.: Espírito Santo'} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Cidade'}\n                    name={['location', 'city']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 255,\n                        message: `A cidade não pode ter mais de 255 caracteres`,\n                      },\n                    ]}\n                  >\n                    <Input placeholder={'E.g.: Vitória'} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Telefone'}\n                    name={'phone'}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 20,\n                        message: `O telefone não pode ter mais de 20 caracteres`,\n                      },\n                    ]}\n                  >\n                    <MaskedInput\n                      mask='(11) 11111-1111'\n                      placeholder={'(27) 99999-0000'}\n                      disabled={\n                        props.user && !props.user?.canSensitiveDataBeUpdated\n                      }\n                    />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'CPF'}\n                    name={'taxpayerId'}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 14,\n                        message: `O CPF não pode ter mais de 14 caracteres`,\n                      },\n                    ]}\n                  >\n                    <MaskedInput\n                      mask='111.111.111-11'\n                      placeholder={'111.222.333-44'}\n                    />\n                  </Form.Item>\n                </Col>\n                {isEditorRole && (\n                  <>\n                    <Col xs={24} lg={8}>\n                      <Form.Item\n                        label={'Preço por palavra'}\n                        name={'pricePerWord'}\n                        rules={[\n                          {\n                            required: true,\n                            message: 'O campo é obrigatório',\n                          },\n                          {\n                            type: 'number',\n                            min: 0.01,\n                            message: 'O valor mínimo é 1 centavo',\n                          },\n                        ]}\n                      >\n                        <CurrencyInput\n                          onChange={(e, value) => {\n                            form.setFieldsValue({\n                              pricePerWord: value,\n                            });\n                          }}\n                        />\n                      </Form.Item>\n                    </Col>\n                    {[1, 2, 3].map((_, index) => {\n                      return (\n                        <React.Fragment key={index}>\n                          <Col xs={18} lg={6}>\n                            <Form.Item\n                              label={'Habilidade'}\n                              name={['skills', index, 'name']}\n                              rules={[\n                                {\n                                  required: true,\n                                  message: 'O campo é obrigatório',\n                                },\n                                {\n                                  max: 50,\n                                  message: `A habilidade não pode ter mais de 50 caracteres`,\n                                },\n                              ]}\n                            >\n                              <Input placeholder={'E.g.: JavaScript'} />\n                            </Form.Item>\n                          </Col>\n                          <Col xs={6} lg={2}>\n                            <Form.Item\n                              label={'%'}\n                              name={['skills', index, 'percentage']}\n                              rules={[\n                                {\n                                  required: true,\n                                  message: '',\n                                },\n                                {\n                                  async validator(field, value) {\n                                    if (isNaN(Number(value)))\n                                      throw new Error('Apenas números');\n                                    if (Number(value) > 100)\n                                      throw new Error('Máximo é 100');\n                                    if (Number(value) < 0)\n                                      throw new Error('Mínimo é 0');\n                                  },\n                                },\n                              ]}\n                            >\n                              <Input />\n                            </Form.Item>\n                          </Col>\n                        </React.Fragment>\n                      );\n                    })}\n                  </>\n                )}\n              </Row>\n            </TabPane>\n            <TabPane key={'bankAccount'} tab={'Dados bancários'} forceRender>\n              <Row gutter={24}>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Instituição'}\n                    name={['bankAccount', 'bankCode']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 3,\n                        message: `A instituição precisa ter 3 caracteres`,\n                      },\n                      {\n                        min: 3,\n                        message: `A instituição precisa ter 3 caracteres`,\n                      },\n                    ]}\n                  >\n                    <Input placeholder={'260'} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Agência'}\n                    name={['bankAccount', 'agency']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 10,\n                        message: `A agência precisa ter no máximo 10 caracteres`,\n                      },\n                      {\n                        min: 1,\n                        message: `A agência precisa ter no mínimo 1 caractere`,\n                      },\n                    ]}\n                  >\n                    <Input placeholder={'0001'} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Conta sem dígito'}\n                    name={['bankAccount', 'number']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                    ]}\n                  >\n                    <Input placeholder={'12345'} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Dígito'}\n                    name={['bankAccount', 'digit']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                      {\n                        max: 1,\n                        message: `O dígito precisa ser único`,\n                      },\n                    ]}\n                  >\n                    <Input placeholder={'1'} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} lg={8}>\n                  <Form.Item\n                    label={'Tipo de conta'}\n                    name={['bankAccount', 'type']}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'O campo é obrigatório',\n                      },\n                    ]}\n                  >\n                    <Select placeholder={'Selecione o tipo de conta'}>\n                      <Select.Option value={'SAVING'}>\n                        Conta poupança\n                      </Select.Option>\n                      <Select.Option value={'CHECKING'}>\n                        Conta corrente\n                      </Select.Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n              </Row>\n            </TabPane>\n          </Tabs>\n        </Col>\n        <Col xs={24}>\n          <Row justify={'end'}>\n            <Button loading={loading} type={'primary'} htmlType={'submit'}>\n              {props.user ? 'Atualizar usuário' : 'Cadastrar usuário'}\n            </Button>\n          </Row>\n        </Col>\n      </Row>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}