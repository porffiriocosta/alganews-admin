{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as ExpensesActions from '../store/Expense.slice';\nimport * as RevenuesActions from '../store/Revenue.slice';\nexport default function useCashFlow(type) {\n  _s();\n\n  const dispatch = useDispatch();\n  const query = useSelector(s => type === 'EXPENSE' ? s.cashFlow.expense.query : s.cashFlow.revenue.query);\n  const entries = useSelector(s => type === 'EXPENSE' ? s.cashFlow.expense.list : s.cashFlow.revenue.list);\n  const fetching = useSelector(s => type === 'EXPENSE' ? s.cashFlow.expense.fetching : s.cashFlow.revenue.fetching);\n  const selected = useSelector(s => type === 'EXPENSE' ? s.cashFlow.expense.selected : s.cashFlow.revenue.selected);\n  const fetchEntries = useCallback(() => dispatch(type === 'EXPENSE' ? ExpensesActions.getExpenses() : RevenuesActions.getRevenues()).unwrap(), [dispatch, type]);\n  const createEntry = useCallback(entry => dispatch(type === 'EXPENSE' ? ExpensesActions.createExpense(entry) : RevenuesActions.createRevenue(entry)).unwrap(), [dispatch, type]);\n  const updateEntry = useCallback((entryId, entry) => dispatch(type === 'EXPENSE' ? ExpensesActions.updateExpense({\n    entryId: entryId,\n    entry: entry\n  }) : RevenuesActions.updateRevenue({\n    entryId: entryId,\n    entry: entry\n  })).unwrap(), [dispatch, type]);\n  const removeEntry = useCallback(entryId => dispatch(type === 'EXPENSE' ? ExpensesActions.removeExpense(entryId) : RevenuesActions.removeRevenue(entryId)).unwrap(), [dispatch, type]);\n  const removeEntries = useCallback(ids => dispatch(type === 'EXPENSE' ? ExpensesActions.removeEntriesInBatch(ids) : RevenuesActions.removeEntriesInBatch(ids)), [dispatch, type]);\n  const setSelected = useCallback(keys => dispatch(type === 'EXPENSE' ? ExpensesActions.setSelectedExpenses(keys) : RevenuesActions.setSelectedRevenues(keys)), [dispatch, type]);\n  const setQuery = useCallback(query => dispatch(type === 'EXPENSE' ? ExpensesActions.setQuery(query) : RevenuesActions.setQuery(query)), [dispatch, type]);\n  return {\n    entries,\n    query,\n    selected,\n    fetching,\n    fetchEntries,\n    removeEntries,\n    setQuery,\n    setSelected,\n    createEntry,\n    updateEntry,\n    removeEntry\n  };\n}\n\n_s(useCashFlow, \"WxXQsATUkvLVnXhd7K0xhOoiXw8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/hooks/useCashFlow.tsx"],"names":["useCallback","useDispatch","useSelector","ExpensesActions","RevenuesActions","useCashFlow","type","dispatch","query","s","cashFlow","expense","revenue","entries","list","fetching","selected","fetchEntries","getExpenses","getRevenues","unwrap","createEntry","entry","createExpense","createRevenue","updateEntry","entryId","updateExpense","updateRevenue","removeEntry","removeExpense","removeRevenue","removeEntries","ids","removeEntriesInBatch","setSelected","keys","setSelectedExpenses","setSelectedRevenues","setQuery"],"mappings":"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","sourcesContent":["import { Key } from 'antd/lib/table/interface';\nimport { CashFlow } from 'danielbonifacio-sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../store';\nimport * as ExpensesActions from '../store/Expense.slice';\nimport * as RevenuesActions from '../store/Revenue.slice';\n\ntype CashFlowEntryType = CashFlow.EntrySummary['type'];\n\nexport default function useCashFlow(type: CashFlowEntryType) {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const query = useSelector((s: RootState) =>\n    type === 'EXPENSE' ? s.cashFlow.expense.query : s.cashFlow.revenue.query\n  );\n  const entries = useSelector((s: RootState) =>\n    type === 'EXPENSE' ? s.cashFlow.expense.list : s.cashFlow.revenue.list\n  );\n  const fetching = useSelector((s: RootState) =>\n    type === 'EXPENSE'\n      ? s.cashFlow.expense.fetching\n      : s.cashFlow.revenue.fetching\n  );\n  const selected = useSelector((s: RootState) =>\n    type === 'EXPENSE'\n      ? s.cashFlow.expense.selected\n      : s.cashFlow.revenue.selected\n  );\n\n  const fetchEntries = useCallback(\n    () =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.getExpenses()\n          : RevenuesActions.getRevenues()\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const createEntry = useCallback(\n    (entry: CashFlow.EntryInput) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.createExpense(entry)\n          : RevenuesActions.createRevenue(entry)\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const updateEntry = useCallback(\n    (entryId: number, entry: CashFlow.EntryInput) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.updateExpense({\n              entryId: entryId,\n              entry: entry,\n            })\n          : RevenuesActions.updateRevenue({\n              entryId: entryId,\n              entry: entry,\n            })\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const removeEntry = useCallback(\n    (entryId: number) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.removeExpense(entryId)\n          : RevenuesActions.removeRevenue(entryId)\n      ).unwrap(),\n    [dispatch, type]\n  );\n\n  const removeEntries = useCallback(\n    (ids: number[]) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.removeEntriesInBatch(ids)\n          : RevenuesActions.removeEntriesInBatch(ids)\n      ),\n    [dispatch, type]\n  );\n\n  const setSelected = useCallback(\n    (keys: Key[]) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.setSelectedExpenses(keys)\n          : RevenuesActions.setSelectedRevenues(keys)\n      ),\n    [dispatch, type]\n  );\n\n  const setQuery = useCallback(\n    (query: Partial<CashFlow.Query>) =>\n      dispatch(\n        type === 'EXPENSE'\n          ? ExpensesActions.setQuery(query)\n          : RevenuesActions.setQuery(query)\n      ),\n    [dispatch, type]\n  );\n\n  return {\n    entries,\n    query,\n    selected,\n    fetching,\n    fetchEntries,\n    removeEntries,\n    setQuery,\n    setSelected,\n    createEntry,\n    updateEntry,\n    removeEntry,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}