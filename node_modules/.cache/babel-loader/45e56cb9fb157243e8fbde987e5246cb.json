{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as PaymentActions from '../store/Payment.slice';\nexport default function usePayments() {\n  _s();\n\n  const dispatch = useDispatch();\n  const fetching = useSelector(s => s.payment.fetching);\n  const payments = useSelector(s => s.payment.paginated);\n  const query = useSelector(s => s.payment.query);\n  const selected = useSelector(s => s.payment.selected);\n  const approvePaymentsInBatch = useCallback(ids => dispatch(PaymentActions.approvePaymentsInBatch(ids)), [dispatch]);\n  const deleteExistingPayment = useCallback(id => dispatch(PaymentActions.deleteExistingPayment(id)), [dispatch]);\n  const fetchPayments = useCallback(() => dispatch(PaymentActions.getAllPayments()).unwrap(), [dispatch]);\n  const setQuery = useCallback(query => dispatch(PaymentActions.setQuery(query)), [dispatch]);\n  const setSelected = useCallback(keys => dispatch(PaymentActions.storeSelectedKeys(keys)), [dispatch]);\n  return {\n    payments,\n    fetching,\n    query,\n    selected,\n    fetchPayments,\n    approvePaymentsInBatch,\n    setQuery,\n    setSelected,\n    deleteExistingPayment\n  };\n}\n\n_s(usePayments, \"QVyU+C69MZwPD4MSTjHjQAHsePs=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/hooks/usePayments.ts"],"names":["useCallback","useDispatch","useSelector","PaymentActions","usePayments","dispatch","fetching","s","payment","payments","paginated","query","selected","approvePaymentsInBatch","ids","deleteExistingPayment","id","fetchPayments","getAllPayments","unwrap","setQuery","setSelected","keys","storeSelectedKeys"],"mappings":";;AAEA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,KAAKC,cAAZ,MAAgC,wBAAhC;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAMK,QAAQ,GAAGJ,WAAW,CAAEK,CAAD,IAAkBA,CAAC,CAACC,OAAF,CAAUF,QAA7B,CAA5B;AACA,QAAMG,QAAQ,GAAGP,WAAW,CAAEK,CAAD,IAAkBA,CAAC,CAACC,OAAF,CAAUE,SAA7B,CAA5B;AACA,QAAMC,KAAK,GAAGT,WAAW,CAAEK,CAAD,IAAkBA,CAAC,CAACC,OAAF,CAAUG,KAA7B,CAAzB;AACA,QAAMC,QAAQ,GAAGV,WAAW,CAAEK,CAAD,IAAkBA,CAAC,CAACC,OAAF,CAAUI,QAA7B,CAA5B;AAEA,QAAMC,sBAAsB,GAAGb,WAAW,CACvCc,GAAD,IAAmBT,QAAQ,CAACF,cAAc,CAACU,sBAAf,CAAsCC,GAAtC,CAAD,CADa,EAExC,CAACT,QAAD,CAFwC,CAA1C;AAKA,QAAMU,qBAAqB,GAAGf,WAAW,CACtCgB,EAAD,IAAgBX,QAAQ,CAACF,cAAc,CAACY,qBAAf,CAAqCC,EAArC,CAAD,CADe,EAEvC,CAACX,QAAD,CAFuC,CAAzC;AAKA,QAAMY,aAAa,GAAGjB,WAAW,CAC/B,MAAMK,QAAQ,CAACF,cAAc,CAACe,cAAf,EAAD,CAAR,CAA0CC,MAA1C,EADyB,EAE/B,CAACd,QAAD,CAF+B,CAAjC;AAKA,QAAMe,QAAQ,GAAGpB,WAAW,CACzBW,KAAD,IAA0BN,QAAQ,CAACF,cAAc,CAACiB,QAAf,CAAwBT,KAAxB,CAAD,CADR,EAE1B,CAACN,QAAD,CAF0B,CAA5B;AAKA,QAAMgB,WAAW,GAAGrB,WAAW,CAC5BsB,IAAD,IAAiBjB,QAAQ,CAACF,cAAc,CAACoB,iBAAf,CAAiCD,IAAjC,CAAD,CADI,EAE7B,CAACjB,QAAD,CAF6B,CAA/B;AAKA,SAAO;AACLI,IAAAA,QADK;AAELH,IAAAA,QAFK;AAGLK,IAAAA,KAHK;AAILC,IAAAA,QAJK;AAKLK,IAAAA,aALK;AAMLJ,IAAAA,sBANK;AAOLO,IAAAA,QAPK;AAQLC,IAAAA,WARK;AASLN,IAAAA;AATK,GAAP;AAWD;;GA5CuBX,W;UACLH,W,EAEAC,W,EACAA,W,EACHA,W,EACGA,W","sourcesContent":["import { Key } from 'antd/lib/table/interface';\nimport { Payment } from 'danielbonifacio-sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../store';\nimport * as PaymentActions from '../store/Payment.slice';\n\nexport default function usePayments() {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const fetching = useSelector((s: RootState) => s.payment.fetching);\n  const payments = useSelector((s: RootState) => s.payment.paginated);\n  const query = useSelector((s: RootState) => s.payment.query);\n  const selected = useSelector((s: RootState) => s.payment.selected);\n\n  const approvePaymentsInBatch = useCallback(\n    (ids: number[]) => dispatch(PaymentActions.approvePaymentsInBatch(ids)),\n    [dispatch]\n  );\n\n  const deleteExistingPayment = useCallback(\n    (id: number) => dispatch(PaymentActions.deleteExistingPayment(id)),\n    [dispatch]\n  );\n\n  const fetchPayments = useCallback(\n    () => dispatch(PaymentActions.getAllPayments()).unwrap(),\n    [dispatch]\n  );\n\n  const setQuery = useCallback(\n    (query: Payment.Query) => dispatch(PaymentActions.setQuery(query)),\n    [dispatch]\n  );\n\n  const setSelected = useCallback(\n    (keys: Key[]) => dispatch(PaymentActions.storeSelectedKeys(keys)),\n    [dispatch]\n  );\n\n  return {\n    payments,\n    fetching,\n    query,\n    selected,\n    fetchPayments,\n    approvePaymentsInBatch,\n    setQuery,\n    setSelected,\n    deleteExistingPayment,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}