{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nimport pkceChallenge from 'pkce-challenge';\nconst authServer = axios.create({\n  baseURL: 'http://localhost:8081'\n});\nauthServer.interceptors.response.use(undefined, async error => {\n  var _error$response;\n\n  if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    AuthService.imperativelySendToLogout();\n  }\n\n  return Promise.reject(error);\n});\nexport default class AuthService {\n  static imperativelySendToLogout() {\n    window.localStorage.clear();\n    window.location.href = 'http://localhost:8081/logout?redirect=http://localhost:3000';\n  }\n\n  static async getNewToken(config) {\n    const formUrlEncoded = qs.stringify({\n      refresh_token: config.refreshToken,\n      code_verifier: config.codeVerifier,\n      grant_type: 'refresh_token',\n      client_id: 'alganews-admin'\n    });\n    return authServer.post('/oauth/token', formUrlEncoded, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(res => res.data);\n  }\n\n  static async getFirstAccessTokens(config) {\n    const data = {\n      code: config.code,\n      code_verifier: config.codeVerifier,\n      redirect_uri: config.redirectUri,\n      grant_type: 'authorization_code',\n      client_id: 'alganews-admin'\n    };\n    const encodedData = qs.stringify(data);\n    return authServer.post('/oauth/token', encodedData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(res => res.data);\n  }\n\n  static getLoginScreenUrl(codeChallenge) {\n    const config = qs.stringify({\n      response_type: 'code',\n      client_id: 'alganews-admin',\n      redirect_uri: `${window.location.origin}/authorize`,\n      code_challenge: codeChallenge,\n      code_challenge_method: 'S256'\n    });\n    return `http://localhost:8081/oauth/authorize?${config}`;\n  }\n\n  static async imperativelySendToLoginScreen() {\n    const {\n      code_challenge,\n      code_verifier\n    } = await pkceChallenge();\n    this.setCodeVerifier(code_verifier);\n    const loginUrl = this.getLoginScreenUrl(code_challenge); // imperativo\n    // gera efeito colateral\n\n    window.location.href = loginUrl;\n  }\n\n  static getAccessToken() {\n    return window.localStorage.getItem('accessToken');\n  }\n\n  static setAccessToken(token) {\n    return window.localStorage.setItem('accessToken', token);\n  }\n\n  static getRefreshToken() {\n    return window.localStorage.getItem('refreshToken');\n  }\n\n  static setRefreshToken(token) {\n    return window.localStorage.setItem('refreshToken', token);\n  }\n\n  static getCodeVerifier() {\n    return window.localStorage.getItem('codeVerifier');\n  }\n\n  static setCodeVerifier(getCodeVerifier) {\n    return window.localStorage.setItem('codeVerifier', getCodeVerifier);\n  }\n\n}","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/auth/Authorization.service.ts"],"names":["axios","qs","pkceChallenge","authServer","create","baseURL","interceptors","response","use","undefined","error","status","AuthService","imperativelySendToLogout","Promise","reject","window","localStorage","clear","location","href","getNewToken","config","formUrlEncoded","stringify","refresh_token","refreshToken","code_verifier","codeVerifier","grant_type","client_id","post","headers","then","res","data","getFirstAccessTokens","code","redirect_uri","redirectUri","encodedData","getLoginScreenUrl","codeChallenge","response_type","origin","code_challenge","code_challenge_method","imperativelySendToLoginScreen","setCodeVerifier","loginUrl","getAccessToken","getItem","setAccessToken","token","setItem","getRefreshToken","setRefreshToken","getCodeVerifier"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\nimport pkceChallenge from 'pkce-challenge';\n\nconst authServer = axios.create({\n  baseURL: 'http://localhost:8081',\n});\n\nauthServer.interceptors.response.use(undefined, async (error) => {\n  if (error?.response?.status === 401) {\n    AuthService.imperativelySendToLogout();\n  }\n\n  return Promise.reject(error);\n});\n\nexport interface OAuthAuthorizationTokenResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: 'bearer' | string;\n  expires_in: number;\n  scope: string;\n  [key: string]: string | number;\n}\n\nexport default class AuthService {\n  public static imperativelySendToLogout() {\n    window.localStorage.clear();\n    window.location.href =\n      'http://localhost:8081/logout?redirect=http://localhost:3000';\n  }\n\n  public static async getNewToken(config: {\n    refreshToken: string;\n    codeVerifier: string;\n  }) {\n    const formUrlEncoded = qs.stringify({\n      refresh_token: config.refreshToken,\n      code_verifier: config.codeVerifier,\n      grant_type: 'refresh_token',\n      client_id: 'alganews-admin',\n    });\n\n    return authServer\n      .post<OAuthAuthorizationTokenResponse>('/oauth/token', formUrlEncoded, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      })\n      .then((res) => res.data);\n  }\n\n  public static async getFirstAccessTokens(config: {\n    code: string;\n    codeVerifier: string;\n    redirectUri: string;\n  }) {\n    const data = {\n      code: config.code,\n      code_verifier: config.codeVerifier,\n      redirect_uri: config.redirectUri,\n      grant_type: 'authorization_code',\n      client_id: 'alganews-admin',\n    };\n\n    const encodedData = qs.stringify(data);\n\n    return authServer\n      .post<OAuthAuthorizationTokenResponse>('/oauth/token', encodedData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      })\n      .then((res) => res.data);\n  }\n\n  public static getLoginScreenUrl(codeChallenge: string) {\n    const config = qs.stringify({\n      response_type: 'code',\n      client_id: 'alganews-admin',\n      redirect_uri: `${window.location.origin}/authorize`,\n      code_challenge: codeChallenge,\n      code_challenge_method: 'S256',\n    });\n\n    return `http://localhost:8081/oauth/authorize?${config}`;\n  }\n\n  public static async imperativelySendToLoginScreen() {\n    const { code_challenge, code_verifier } = await pkceChallenge();\n    this.setCodeVerifier(code_verifier);\n\n    const loginUrl = this.getLoginScreenUrl(code_challenge);\n\n    // imperativo\n    // gera efeito colateral\n    window.location.href = loginUrl;\n  }\n\n  public static getAccessToken() {\n    return window.localStorage.getItem('accessToken');\n  }\n  public static setAccessToken(token: string) {\n    return window.localStorage.setItem('accessToken', token);\n  }\n\n  public static getRefreshToken() {\n    return window.localStorage.getItem('refreshToken');\n  }\n  public static setRefreshToken(token: string) {\n    return window.localStorage.setItem('refreshToken', token);\n  }\n\n  public static getCodeVerifier() {\n    return window.localStorage.getItem('codeVerifier');\n  }\n  public static setCodeVerifier(getCodeVerifier: string) {\n    return window.localStorage.setItem('codeVerifier', getCodeVerifier);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}