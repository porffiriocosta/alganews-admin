{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjetos\\\\alganews-admin\\\\src\\\\app\\\\features\\\\PaymentForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Button, Col, DatePicker, Descriptions, Divider, Form, Input, notification, Row, Select, Skeleton, Space, Tabs, Tooltip } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport moment from 'moment';\nimport { useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport { InfoCircleFilled } from '@ant-design/icons';\nimport useUsers from '../../core/hooks/useUsers';\nimport CurrencyInput from '../components/CurrencyInput';\nimport usePayment from '../../core/hooks/usePayment';\nimport transformIntoBrl from '../../core/utils/transformIntoBrl';\nimport { useState } from 'react';\nimport AskForPaymentPreview from './AskForPaymentPreview';\nimport { BusinessError } from 'danielbonifacio-sdk/dist/errors';\nimport { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PaymentForm() {\n  _s();\n\n  const [form] = useForm();\n  const {\n    editors,\n    fetchUsers,\n    fetching\n  } = useUsers();\n  const history = useHistory();\n  const {\n    fetchingPaymentPreview,\n    clearPaymentPreview,\n    paymentPreview,\n    fetchPaymentPreview,\n    schedulePayment,\n    schedulingPayment\n  } = usePayment();\n  const [scheduledTo, setScheduledTo] = useState('');\n  const [paymentPreviewError, setPaymentPreviewError] = useState();\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n  const updateScheduleDate = useCallback(() => {\n    const {\n      scheduledTo\n    } = form.getFieldsValue();\n    setScheduledTo(scheduledTo);\n  }, [form]);\n  const clearPaymentPreviewError = useCallback(() => {\n    setPaymentPreviewError(undefined);\n  }, []);\n  const getPaymentPreview = useCallback(async () => {\n    const {\n      accountingPeriod,\n      bonuses,\n      payee\n    } = form.getFieldsValue();\n\n    if (payee && accountingPeriod) {\n      if (payee.id && accountingPeriod.endsOn && accountingPeriod.startsOn) {\n        try {\n          await fetchPaymentPreview({\n            payee,\n            accountingPeriod,\n            bonuses: bonuses || []\n          });\n          clearPaymentPreviewError();\n        } catch (err) {\n          clearPaymentPreview();\n\n          if (err instanceof BusinessError) {\n            setPaymentPreviewError(err);\n          }\n\n          throw err;\n        }\n      } else {\n        clearPaymentPreview();\n        clearPaymentPreviewError();\n      }\n    }\n  }, [form, fetchPaymentPreview, clearPaymentPreview, clearPaymentPreviewError]);\n  const handleFormChange = useCallback(([field]) => {\n    if (Array.isArray(field === null || field === void 0 ? void 0 : field.name)) {\n      if (field.name.includes('payee') || field.name.includes('_accountingPeriod') || field.name.includes('bonuses')) {\n        getPaymentPreview();\n      }\n\n      if (field.name.includes('scheduledTo')) {\n        updateScheduleDate();\n      }\n    }\n  }, [getPaymentPreview, updateScheduleDate]);\n  const debouncedHandleFormChange = debounce(handleFormChange, 1000);\n  const handleFormSubmit = useCallback(async form => {\n    const paymentDto = {\n      accountingPeriod: form.accountingPeriod,\n      payee: form.payee,\n      bonuses: form.bonuses || [],\n      scheduledTo: moment(form.scheduledTo).format('YYYY-MM-DD')\n    };\n    await schedulePayment(paymentDto);\n    notification.success({\n      message: 'Pagamento agendado com sucesso'\n    });\n    history.push('/pagamentos');\n  }, [schedulePayment, history]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    layout: 'vertical',\n    onFieldsChange: debouncedHandleFormChange,\n    onFinish: handleFormSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      gutter: 24,\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 8,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }],\n          label: 'Editor',\n          name: ['payee', 'id'],\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            showSearch: true,\n            loading: fetching,\n            placeholder: fetching ? 'Carregando editores...' : 'Selecione um editor',\n            filterOption: (input, option) => {\n              return (option === null || option === void 0 ? void 0 : option.children.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase().indexOf(input.toLowerCase())) >= 0 || (option === null || option === void 0 ? void 0 : option.children).toLowerCase().indexOf(input.toLowerCase()) >= 0;\n            },\n            children: editors.map(editor => /*#__PURE__*/_jsxDEV(Select.Option, {\n              value: editor.id,\n              children: editor.name\n            }, editor.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 8,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          hidden: true,\n          name: ['accountingPeriod', 'startsOn'],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          hidden: true,\n          name: ['accountingPeriod', 'endsOn'],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }],\n          label: 'Período',\n          name: '_accountingPeriod',\n          children: /*#__PURE__*/_jsxDEV(DatePicker.RangePicker, {\n            style: {\n              width: '100%'\n            },\n            format: 'DD/MM/YYYY',\n            onChange: date => {\n              if (date !== null) {\n                const [startsOn, endsOn] = date;\n                form.setFieldsValue({\n                  accountingPeriod: {\n                    startsOn: startsOn.format('YYYY-MM-DD'),\n                    endsOn: endsOn.format('YYYY-MM-DD')\n                  }\n                });\n              } else {\n                form.setFieldsValue({\n                  accountingPeriod: {\n                    startsOn: undefined,\n                    endsOn: undefined\n                  }\n                });\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 8,\n        children: /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: 'Agendamento',\n          name: 'scheduledTo',\n          rules: [{\n            required: true,\n            message: 'O campo é obrigatório'\n          }],\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            disabledDate: date => {\n              return date.isBefore(moment()) || date.isAfter(moment().add(7, 'days'));\n            },\n            style: {\n              width: '100%'\n            },\n            format: 'DD/MM/YYYY'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 12,\n        children: fetchingPaymentPreview ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            title: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : !paymentPreview ? /*#__PURE__*/_jsxDEV(AskForPaymentPreview, {\n          error: paymentPreviewError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Tabs, {\n          defaultActiveKey: 'payment',\n          children: [/*#__PURE__*/_jsxDEV(Tabs.TabPane, {\n            tab: 'Demonstrativo',\n            children: /*#__PURE__*/_jsxDEV(Descriptions, {\n              labelStyle: {\n                width: 160\n              },\n              bordered: true,\n              size: 'small',\n              column: 1,\n              children: [/*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Editor',\n                children: paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.payee.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Período',\n                children: /*#__PURE__*/_jsxDEV(Space, {\n                  children: [moment(paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.accountingPeriod.startsOn).format('DD/MM/YYYY'), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"\\xE0\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 23\n                  }, this), moment(paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.accountingPeriod.endsOn).format('DD/MM/YYYY')]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Agendamento',\n                children: scheduledTo && moment(scheduledTo).format('DD/MM/YYYY')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Palavras',\n                children: paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.earnings.words\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Ganhos',\n                children: transformIntoBrl(paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.grandTotalAmount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 19\n              }, this), paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.bonuses.map((bonus, index) => /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: /*#__PURE__*/_jsxDEV(Space, {\n                  children: [`Bônus ${index + 1}`, /*#__PURE__*/_jsxDEV(Tooltip, {\n                    title: bonus.title,\n                    children: /*#__PURE__*/_jsxDEV(InfoCircleFilled, {\n                      style: {\n                        color: '#09f',\n                        fontSize: 18\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 293,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 25\n                }, this),\n                children: transformIntoBrl(bonus.amount)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Ganhos de posts',\n                children: transformIntoBrl(paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.earnings.totalAmount)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this)\n          }, 'payment', false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tabs.TabPane, {\n            tab: 'Dados bancários',\n            children: /*#__PURE__*/_jsxDEV(Descriptions, {\n              bordered: true,\n              labelStyle: {\n                width: 160\n              },\n              size: 'small',\n              column: 1,\n              children: [/*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Código do Banco',\n                children: paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.bankAccount.bankCode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Número da conta',\n                children: paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.bankAccount.number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Dígito da conta',\n                children: paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.bankAccount.digit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Agência',\n                children: paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.bankAccount.agency\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n                label: 'Tipo de conta',\n                children: (paymentPreview === null || paymentPreview === void 0 ? void 0 : paymentPreview.bankAccount.type) === 'CHECKING' ? 'Conta corrente' : 'Conta poupança'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this)\n          }, 'bankAccount', false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        lg: 12,\n        children: /*#__PURE__*/_jsxDEV(Form.List, {\n          name: 'bonuses',\n          children: (fields, {\n            add,\n            remove\n          }) => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [fields.map(field => {\n                return /*#__PURE__*/_jsxDEV(Row, {\n                  gutter: 24,\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    xs: 24,\n                    lg: 14,\n                    children: /*#__PURE__*/_jsxDEV(Form.Item, { ...field,\n                      name: [field.name, 'title'],\n                      label: 'Descrição',\n                      rules: [{\n                        required: true,\n                        message: 'O campo é obrigatório'\n                      }],\n                      children: /*#__PURE__*/_jsxDEV(Input, {\n                        placeholder: 'E.g.: 1 milhão de views'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 357,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 346,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    xs: 24,\n                    lg: 6,\n                    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                      initialValue: 0,\n                      ...field,\n                      name: [field.name, 'amount'],\n                      label: 'Valor',\n                      rules: [{\n                        required: true,\n                        message: 'O campo é obrigatório'\n                      }],\n                      children: /*#__PURE__*/_jsxDEV(CurrencyInput, {\n                        onChange: (a, amount) => {\n                          const {\n                            bonuses\n                          } = form.getFieldsValue();\n                          form.setFieldsValue({\n                            bonuses: bonuses === null || bonuses === void 0 ? void 0 : bonuses.map((bonus, index) => {\n                              return index === field.name ? {\n                                title: bonus.title,\n                                amount\n                              } : bonus;\n                            })\n                          });\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 373,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 361,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    xs: 24,\n                    lg: 4,\n                    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n                      label: 'Remover',\n                      children: /*#__PURE__*/_jsxDEV(Button, {\n                        onClick: () => remove(field.name),\n                        icon: /*#__PURE__*/_jsxDEV(DeleteOutlined, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 391,\n                          columnNumber: 37\n                        }, this),\n                        danger: true,\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 389,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 388,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 25\n                  }, this)]\n                }, field.name, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 23\n                }, this);\n              }), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"dashed\",\n                onClick: () => add(),\n                block: true,\n                icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 27\n                }, this),\n                children: \"Adicionar b\\xF4nus\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      justify: \"end\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: 'primary',\n        htmlType: \"submit\",\n        loading: schedulingPayment,\n        children: \"Cadastrar agendamento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PaymentForm, \"fQFvMio3mwhAEkM3H8GdA3rKoFY=\", false, function () {\n  return [useForm, useUsers, useHistory, usePayment];\n});\n\n_c = PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/app/features/PaymentForm.tsx"],"names":["DeleteOutlined","PlusOutlined","Button","Col","DatePicker","Descriptions","Divider","Form","Input","notification","Row","Select","Skeleton","Space","Tabs","Tooltip","useForm","moment","useCallback","debounce","InfoCircleFilled","useUsers","CurrencyInput","usePayment","transformIntoBrl","useState","AskForPaymentPreview","BusinessError","useEffect","useHistory","PaymentForm","form","editors","fetchUsers","fetching","history","fetchingPaymentPreview","clearPaymentPreview","paymentPreview","fetchPaymentPreview","schedulePayment","schedulingPayment","scheduledTo","setScheduledTo","paymentPreviewError","setPaymentPreviewError","updateScheduleDate","getFieldsValue","clearPaymentPreviewError","undefined","getPaymentPreview","accountingPeriod","bonuses","payee","id","endsOn","startsOn","err","handleFormChange","field","Array","isArray","name","includes","debouncedHandleFormChange","handleFormSubmit","paymentDto","format","success","message","push","required","input","option","children","normalize","replace","toLowerCase","indexOf","map","editor","width","date","setFieldsValue","isBefore","isAfter","add","earnings","words","grandTotalAmount","bonus","index","title","color","fontSize","amount","totalAmount","bankAccount","bankCode","number","digit","agency","type","fields","remove","a"],"mappings":"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","sourcesContent":["import { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Col,\n  DatePicker,\n  Descriptions,\n  Divider,\n  Form,\n  Input,\n  notification,\n  Row,\n  Select,\n  Skeleton,\n  Space,\n  Tabs,\n  Tooltip,\n} from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { Payment } from 'danielbonifacio-sdk';\nimport moment, { Moment } from 'moment';\nimport { FieldData } from 'rc-field-form/lib/interface';\nimport { useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport { InfoCircleFilled } from '@ant-design/icons';\nimport useUsers from '../../core/hooks/useUsers';\nimport CurrencyInput from '../components/CurrencyInput';\nimport usePayment from '../../core/hooks/usePayment';\nimport transformIntoBrl from '../../core/utils/transformIntoBrl';\nimport { useState } from 'react';\nimport AskForPaymentPreview from './AskForPaymentPreview';\nimport CustomError from 'danielbonifacio-sdk/dist/CustomError';\nimport { BusinessError } from 'danielbonifacio-sdk/dist/errors';\nimport { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport default function PaymentForm() {\n  const [form] = useForm<Payment.Input>();\n  const { editors, fetchUsers, fetching } = useUsers();\n  const history = useHistory();\n  const {\n    fetchingPaymentPreview,\n    clearPaymentPreview,\n    paymentPreview,\n    fetchPaymentPreview,\n    schedulePayment,\n    schedulingPayment,\n  } = usePayment();\n  const [scheduledTo, setScheduledTo] = useState('');\n  const [paymentPreviewError, setPaymentPreviewError] = useState<CustomError>();\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  const updateScheduleDate = useCallback(() => {\n    const { scheduledTo } = form.getFieldsValue();\n    setScheduledTo(scheduledTo);\n  }, [form]);\n\n  const clearPaymentPreviewError = useCallback(() => {\n    setPaymentPreviewError(undefined);\n  }, []);\n\n  const getPaymentPreview = useCallback(async () => {\n    const { accountingPeriod, bonuses, payee } = form.getFieldsValue();\n    if (payee && accountingPeriod) {\n      if (payee.id && accountingPeriod.endsOn && accountingPeriod.startsOn) {\n        try {\n          await fetchPaymentPreview({\n            payee,\n            accountingPeriod,\n            bonuses: bonuses || [],\n          });\n          clearPaymentPreviewError();\n        } catch (err) {\n          clearPaymentPreview();\n          if (err instanceof BusinessError) {\n            setPaymentPreviewError(err);\n          }\n          throw err;\n        }\n      } else {\n        clearPaymentPreview();\n        clearPaymentPreviewError();\n      }\n    }\n  }, [\n    form,\n    fetchPaymentPreview,\n    clearPaymentPreview,\n    clearPaymentPreviewError,\n  ]);\n\n  const handleFormChange = useCallback(\n    ([field]: FieldData[]) => {\n      if (Array.isArray(field?.name)) {\n        if (\n          field.name.includes('payee') ||\n          field.name.includes('_accountingPeriod') ||\n          field.name.includes('bonuses')\n        ) {\n          getPaymentPreview();\n        }\n\n        if (field.name.includes('scheduledTo')) {\n          updateScheduleDate();\n        }\n      }\n    },\n    [getPaymentPreview, updateScheduleDate]\n  );\n\n  const debouncedHandleFormChange = debounce(handleFormChange, 1000);\n\n  const handleFormSubmit = useCallback(\n    async (form: Payment.Input) => {\n      const paymentDto: Payment.Input = {\n        accountingPeriod: form.accountingPeriod,\n        payee: form.payee,\n        bonuses: form.bonuses || [],\n        scheduledTo: moment(form.scheduledTo).format('YYYY-MM-DD'),\n      };\n\n      await schedulePayment(paymentDto);\n\n      notification.success({\n        message: 'Pagamento agendado com sucesso',\n      });\n\n      history.push('/pagamentos');\n    },\n    [schedulePayment, history]\n  );\n\n  return (\n    <Form<Payment.Input>\n      form={form}\n      layout={'vertical'}\n      onFieldsChange={debouncedHandleFormChange}\n      onFinish={handleFormSubmit}\n    >\n      <Row gutter={24}>\n        <Col xs={24} lg={8}>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n            ]}\n            label={'Editor'}\n            name={['payee', 'id']}\n          >\n            <Select\n              showSearch\n              loading={fetching}\n              placeholder={\n                fetching ? 'Carregando editores...' : 'Selecione um editor'\n              }\n              filterOption={(input, option) => {\n                return (\n                  option?.children\n                    .normalize('NFD')\n                    .replace(/[\\u0300-\\u036f]/g, '')\n                    .toLowerCase()\n                    .indexOf(input.toLowerCase()) >= 0 ||\n                  (option?.children as string)\n                    .toLowerCase()\n                    .indexOf(input.toLowerCase()) >= 0\n                );\n              }}\n            >\n              {editors.map((editor) => (\n                <Select.Option key={editor.id} value={editor.id}>\n                  {editor.name}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n        </Col>\n        <Col xs={24} lg={8}>\n          <Form.Item hidden name={['accountingPeriod', 'startsOn']}>\n            <Input hidden />\n          </Form.Item>\n          <Form.Item hidden name={['accountingPeriod', 'endsOn']}>\n            <Input hidden />\n          </Form.Item>\n          <Form.Item\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n            ]}\n            label={'Período'}\n            name={'_accountingPeriod'}\n          >\n            <DatePicker.RangePicker\n              style={{ width: '100%' }}\n              format={'DD/MM/YYYY'}\n              onChange={(date) => {\n                if (date !== null) {\n                  const [startsOn, endsOn] = date as Moment[];\n                  form.setFieldsValue({\n                    accountingPeriod: {\n                      startsOn: startsOn.format('YYYY-MM-DD'),\n                      endsOn: endsOn.format('YYYY-MM-DD'),\n                    },\n                  });\n                } else {\n                  form.setFieldsValue({\n                    accountingPeriod: {\n                      startsOn: undefined,\n                      endsOn: undefined,\n                    },\n                  });\n                }\n              }}\n            />\n          </Form.Item>\n        </Col>\n        <Col xs={24} lg={8}>\n          <Form.Item\n            label={'Agendamento'}\n            name={'scheduledTo'}\n            rules={[\n              {\n                required: true,\n                message: 'O campo é obrigatório',\n              },\n            ]}\n          >\n            <DatePicker\n              disabledDate={(date) => {\n                return (\n                  date.isBefore(moment()) ||\n                  date.isAfter(moment().add(7, 'days'))\n                );\n              }}\n              style={{ width: '100%' }}\n              format={'DD/MM/YYYY'}\n            />\n          </Form.Item>\n        </Col>\n        <Divider />\n        <Col xs={24} lg={12}>\n          {fetchingPaymentPreview ? (\n            <>\n              <Skeleton />\n              <Skeleton title={false} />\n            </>\n          ) : !paymentPreview ? (\n            <AskForPaymentPreview error={paymentPreviewError} />\n          ) : (\n            <Tabs defaultActiveKey={'payment'}>\n              <Tabs.TabPane tab={'Demonstrativo'} key={'payment'}>\n                <Descriptions\n                  labelStyle={{ width: 160 }}\n                  bordered\n                  size={'small'}\n                  column={1}\n                >\n                  <Descriptions.Item label={'Editor'}>\n                    {paymentPreview?.payee.name}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Período'}>\n                    <Space>\n                      {moment(paymentPreview?.accountingPeriod.startsOn).format(\n                        'DD/MM/YYYY'\n                      )}\n                      <span>à</span>\n                      {moment(paymentPreview?.accountingPeriod.endsOn).format(\n                        'DD/MM/YYYY'\n                      )}\n                    </Space>\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Agendamento'}>\n                    {scheduledTo && moment(scheduledTo).format('DD/MM/YYYY')}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Palavras'}>\n                    {paymentPreview?.earnings.words}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Ganhos'}>\n                    {transformIntoBrl(paymentPreview?.grandTotalAmount)}\n                  </Descriptions.Item>\n                  {paymentPreview?.bonuses.map((bonus, index) => (\n                    <Descriptions.Item\n                      key={index}\n                      label={\n                        <Space>\n                          {`Bônus ${index + 1}`}\n                          <Tooltip title={bonus.title}>\n                            <InfoCircleFilled\n                              style={{ color: '#09f', fontSize: 18 }}\n                            />\n                          </Tooltip>\n                        </Space>\n                      }\n                    >\n                      {transformIntoBrl(bonus.amount)}\n                    </Descriptions.Item>\n                  ))}\n                  <Descriptions.Item label={'Ganhos de posts'}>\n                    {transformIntoBrl(paymentPreview?.earnings.totalAmount)}\n                  </Descriptions.Item>\n                </Descriptions>\n              </Tabs.TabPane>\n              <Tabs.TabPane tab={'Dados bancários'} key={'bankAccount'}>\n                <Descriptions\n                  bordered\n                  labelStyle={{ width: 160 }}\n                  size={'small'}\n                  column={1}\n                >\n                  <Descriptions.Item label={'Código do Banco'}>\n                    {paymentPreview?.bankAccount.bankCode}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Número da conta'}>\n                    {paymentPreview?.bankAccount.number}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Dígito da conta'}>\n                    {paymentPreview?.bankAccount.digit}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Agência'}>\n                    {paymentPreview?.bankAccount.agency}\n                  </Descriptions.Item>\n                  <Descriptions.Item label={'Tipo de conta'}>\n                    {paymentPreview?.bankAccount.type === 'CHECKING'\n                      ? 'Conta corrente'\n                      : 'Conta poupança'}\n                  </Descriptions.Item>\n                </Descriptions>\n              </Tabs.TabPane>\n            </Tabs>\n          )}\n        </Col>\n        <Col xs={24} lg={12}>\n          <Form.List name={'bonuses'}>\n            {(fields, { add, remove }) => {\n              return (\n                <>\n                  {fields.map((field) => {\n                    return (\n                      <Row gutter={24} key={field.name}>\n                        <Col xs={24} lg={14}>\n                          <Form.Item\n                            {...field}\n                            name={[field.name, 'title']}\n                            label={'Descrição'}\n                            rules={[\n                              {\n                                required: true,\n                                message: 'O campo é obrigatório',\n                              },\n                            ]}\n                          >\n                            <Input placeholder={'E.g.: 1 milhão de views'} />\n                          </Form.Item>\n                        </Col>\n                        <Col xs={24} lg={6}>\n                          <Form.Item\n                            initialValue={0}\n                            {...field}\n                            name={[field.name, 'amount']}\n                            label={'Valor'}\n                            rules={[\n                              {\n                                required: true,\n                                message: 'O campo é obrigatório',\n                              },\n                            ]}\n                          >\n                            <CurrencyInput\n                              onChange={(a, amount) => {\n                                const { bonuses } = form.getFieldsValue();\n                                form.setFieldsValue({\n                                  bonuses: bonuses?.map((bonus, index) => {\n                                    return index === field.name\n                                      ? { title: bonus.title, amount }\n                                      : bonus;\n                                  }),\n                                });\n                              }}\n                            />\n                          </Form.Item>\n                        </Col>\n                        <Col xs={24} lg={4}>\n                          <Form.Item label={'Remover'}>\n                            <Button\n                              onClick={() => remove(field.name)}\n                              icon={<DeleteOutlined />}\n                              danger\n                              size='small'\n                            />\n                          </Form.Item>\n                        </Col>\n                      </Row>\n                    );\n                  })}\n                  <Button\n                    type='dashed'\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Adicionar bônus\n                  </Button>\n                </>\n              );\n            }}\n          </Form.List>\n        </Col>\n      </Row>\n      <Row justify='end'>\n        <Button type={'primary'} htmlType='submit' loading={schedulingPayment}>\n          Cadastrar agendamento\n        </Button>\n      </Row>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}