{"ast":null,"code":"import { combineReducers, configureStore, isRejected } from '@reduxjs/toolkit';\nimport { notification } from 'antd';\nimport PaymentReducer from './Payment.slice';\nimport UserReducer from './User.reducer';\nimport expenseReducer from './Expense.slice';\nimport revenueReducer from './Revenue.slice';\nimport entriesCategoryReducer from './EntriesCategory.slice';\nimport authReducer from './Auth.slice';\nimport uiReducer from './UI.slice';\n\nconst observeActions = () => next => action => {\n  if (isRejected(action)) {\n    const ignoredActions = ['cash-flow/categories/createCategory/rejected', 'cash-flow/categories/deleteCategory/rejected', 'cash-flow/expenses/createExpense/rejected', 'cash-flow/revenues/createRevenue/rejected', 'user/getAllUsers/rejected'];\n    const shouldNotify = !ignoredActions.includes(action.type);\n    const message = action.meta.rejectedWithValue ? action.payload.message : action.error.message;\n\n    if (shouldNotify) {\n      notification.error({\n        message\n      });\n    }\n  }\n\n  next(action);\n};\n\nconst cashFlowReducer = combineReducers({\n  expense: expenseReducer,\n  revenue: revenueReducer,\n  category: entriesCategoryReducer\n});\nexport const store = configureStore({\n  reducer: {\n    user: UserReducer,\n    payment: PaymentReducer,\n    cashFlow: cashFlowReducer,\n    auth: authReducer,\n    ui: uiReducer\n  },\n  middleware: function (getDefaultMiddlewares) {\n    return getDefaultMiddlewares().concat(observeActions);\n  }\n});","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/store/index.ts"],"names":["combineReducers","configureStore","isRejected","notification","PaymentReducer","UserReducer","expenseReducer","revenueReducer","entriesCategoryReducer","authReducer","uiReducer","observeActions","next","action","ignoredActions","shouldNotify","includes","type","message","meta","rejectedWithValue","payload","error","cashFlowReducer","expense","revenue","category","store","reducer","user","payment","cashFlow","auth","ui","middleware","getDefaultMiddlewares","concat"],"mappings":"AAAA,SACEA,eADF,EAEEC,cAFF,EAGEC,UAHF,QAKO,kBALP;AAMA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,sBAAP,MAAmC,yBAAnC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,cAA0B,GAAG,MAAOC,IAAD,IAAWC,MAAD,IAAY;AAC7D,MAAIX,UAAU,CAACW,MAAD,CAAd,EAAwB;AACtB,UAAMC,cAAc,GAAG,CACrB,8CADqB,EAErB,8CAFqB,EAGrB,2CAHqB,EAIrB,2CAJqB,EAKrB,2BALqB,CAAvB;AAQA,UAAMC,YAAY,GAAG,CAACD,cAAc,CAACE,QAAf,CAAwBH,MAAM,CAACI,IAA/B,CAAtB;AACA,UAAMC,OAAO,GAAGL,MAAM,CAACM,IAAP,CAAYC,iBAAZ,GACZP,MAAM,CAACQ,OAAP,CAAeH,OADH,GAEZL,MAAM,CAACS,KAAP,CAAaJ,OAFjB;;AAIA,QAAIH,YAAJ,EAAkB;AAChBZ,MAAAA,YAAY,CAACmB,KAAb,CAAmB;AACjBJ,QAAAA;AADiB,OAAnB;AAGD;AACF;;AAEDN,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,CAvBD;;AAyBA,MAAMU,eAAe,GAAGvB,eAAe,CAAC;AACtCwB,EAAAA,OAAO,EAAElB,cAD6B;AAEtCmB,EAAAA,OAAO,EAAElB,cAF6B;AAGtCmB,EAAAA,QAAQ,EAAElB;AAH4B,CAAD,CAAvC;AAMA,OAAO,MAAMmB,KAAK,GAAG1B,cAAc,CAAC;AAClC2B,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAExB,WADC;AAEPyB,IAAAA,OAAO,EAAE1B,cAFF;AAGP2B,IAAAA,QAAQ,EAAER,eAHH;AAIPS,IAAAA,IAAI,EAAEvB,WAJC;AAKPwB,IAAAA,EAAE,EAAEvB;AALG,GADyB;AAQlCwB,EAAAA,UAAU,EAAE,UAAUC,qBAAV,EAAiC;AAC3C,WAAOA,qBAAqB,GAAGC,MAAxB,CAA+BzB,cAA/B,CAAP;AACD;AAViC,CAAD,CAA5B","sourcesContent":["import {\n  combineReducers,\n  configureStore,\n  isRejected,\n  Middleware,\n} from '@reduxjs/toolkit';\nimport { notification } from 'antd';\nimport PaymentReducer from './Payment.slice';\nimport UserReducer from './User.reducer';\nimport expenseReducer from './Expense.slice';\nimport revenueReducer from './Revenue.slice';\nimport entriesCategoryReducer from './EntriesCategory.slice';\nimport authReducer from './Auth.slice';\nimport uiReducer from './UI.slice';\n\nconst observeActions: Middleware = () => (next) => (action) => {\n  if (isRejected(action)) {\n    const ignoredActions = [\n      'cash-flow/categories/createCategory/rejected',\n      'cash-flow/categories/deleteCategory/rejected',\n      'cash-flow/expenses/createExpense/rejected',\n      'cash-flow/revenues/createRevenue/rejected',\n      'user/getAllUsers/rejected',\n    ];\n\n    const shouldNotify = !ignoredActions.includes(action.type);\n    const message = action.meta.rejectedWithValue\n      ? action.payload.message\n      : action.error.message;\n\n    if (shouldNotify) {\n      notification.error({\n        message,\n      });\n    }\n  }\n\n  next(action);\n};\n\nconst cashFlowReducer = combineReducers({\n  expense: expenseReducer,\n  revenue: revenueReducer,\n  category: entriesCategoryReducer,\n});\n\nexport const store = configureStore({\n  reducer: {\n    user: UserReducer,\n    payment: PaymentReducer,\n    cashFlow: cashFlowReducer,\n    auth: authReducer,\n    ui: uiReducer,\n  },\n  middleware: function (getDefaultMiddlewares) {\n    return getDefaultMiddlewares().concat(observeActions);\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}