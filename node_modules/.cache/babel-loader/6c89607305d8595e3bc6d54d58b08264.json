{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { CashFlowService } from 'danielbonifacio-sdk';\nimport moment from 'moment';\nimport getThunkStatus from '../utils/getThunkStatus';\nconst params = new URLSearchParams(window.location.search);\nconst yearMonth = params.get('yearMonth');\nconst initialState = {\n  list: [],\n  fetching: false,\n  query: {\n    type: 'EXPENSE',\n    sort: ['transactedOn', 'desc'],\n    yearMonth: yearMonth || moment().format('YYYY-MM')\n  },\n  selected: []\n};\nexport const getExpenses = createAsyncThunk('cash-flow/expenses/getExpenses', async (_, {\n  getState,\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    const {\n      query\n    } = getState().cashFlow.expense;\n    const expenses = await CashFlowService.getAllEntries(query);\n    await dispatch(storeList(expenses));\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const createExpense = createAsyncThunk('cash-flow/expenses/createExpense', async (expense, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    await CashFlowService.insertNewEntry(expense);\n    await dispatch(getExpenses());\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const updateExpense = createAsyncThunk('cash-flow/expenses/updateExpense', async ({\n  entry,\n  entryId\n}, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    await CashFlowService.updateExistingEntry(entryId, entry);\n    await dispatch(getExpenses());\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const removeExpense = createAsyncThunk('cash-flow/expenses/removeExpense', async (expenseId, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    await CashFlowService.removeExistingEntry(expenseId);\n    await dispatch(getExpenses());\n  } catch (err) {\n    return rejectWithValue({ ...err\n    });\n  }\n});\nexport const removeEntriesInBatch = createAsyncThunk('cash-flow/expenses/removeEntriesInBatch', async (ids, {\n  dispatch\n}) => {\n  await CashFlowService.removeEntriesBatch(ids);\n  await dispatch(getExpenses());\n});\nexport const setQuery = createAsyncThunk('cash-flow/expenses/setQuery', async (query, {\n  dispatch\n}) => {\n  await dispatch(_setQuery(query));\n  await dispatch(getExpenses());\n});\nconst expenseSlice = createSlice({\n  initialState,\n  name: 'cash-flow/expenses',\n  reducers: {\n    storeList(state, action) {\n      state.list = action.payload;\n    },\n\n    setSelectedExpenses(state, action) {\n      state.selected = action.payload;\n    },\n\n    setQuery(state, action) {\n      state.query = { ...state.query,\n        ...action.payload\n      };\n    },\n\n    setFetching(state, action) {\n      state.fetching = action.payload;\n    }\n\n  },\n\n  extraReducers(builder) {\n    const {\n      error,\n      loading,\n      success\n    } = getThunkStatus([getExpenses, removeEntriesInBatch, createExpense, updateExpense]);\n    builder.addMatcher(error, state => {\n      state.fetching = false;\n    }).addMatcher(success, state => {\n      state.fetching = false;\n    }).addMatcher(loading, state => {\n      state.fetching = true;\n    });\n  }\n\n});\nexport const {\n  storeList,\n  setSelectedExpenses,\n  setQuery: _setQuery,\n  setFetching\n} = expenseSlice.actions;\nconst expenseReducer = expenseSlice.reducer;\nexport default expenseReducer;","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/store/Expense.slice.ts"],"names":["createAsyncThunk","createSlice","CashFlowService","moment","getThunkStatus","params","URLSearchParams","window","location","search","yearMonth","get","initialState","list","fetching","query","type","sort","format","selected","getExpenses","_","getState","dispatch","rejectWithValue","cashFlow","expense","expenses","getAllEntries","storeList","err","createExpense","insertNewEntry","updateExpense","entry","entryId","updateExistingEntry","removeExpense","expenseId","removeExistingEntry","removeEntriesInBatch","ids","removeEntriesBatch","setQuery","_setQuery","expenseSlice","name","reducers","state","action","payload","setSelectedExpenses","setFetching","extraReducers","builder","error","loading","success","addMatcher","actions","expenseReducer","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Key } from 'antd/lib/table/interface';\nimport { CashFlow, CashFlowService } from 'danielbonifacio-sdk';\nimport moment from 'moment';\nimport { RootState } from '.';\nimport getThunkStatus from '../utils/getThunkStatus';\n\ninterface ExpenseState {\n  list: CashFlow.EntrySummary[];\n  fetching: boolean;\n  query: CashFlow.Query;\n  selected: Key[];\n}\n\nconst params = new URLSearchParams(window.location.search);\nconst yearMonth = params.get('yearMonth');\n\nconst initialState: ExpenseState = {\n  list: [],\n  fetching: false,\n  query: {\n    type: 'EXPENSE',\n    sort: ['transactedOn', 'desc'],\n    yearMonth: yearMonth || moment().format('YYYY-MM'),\n  },\n  selected: [],\n};\n\nexport const getExpenses = createAsyncThunk(\n  'cash-flow/expenses/getExpenses',\n  async (_, { getState, dispatch, rejectWithValue }) => {\n    try {\n      const { query } = (getState() as RootState).cashFlow.expense;\n      const expenses = await CashFlowService.getAllEntries(query);\n      await dispatch(storeList(expenses));\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const createExpense = createAsyncThunk(\n  'cash-flow/expenses/createExpense',\n  async (expense: CashFlow.EntryInput, { dispatch, rejectWithValue }) => {\n    try {\n      await CashFlowService.insertNewEntry(expense);\n      await dispatch(getExpenses());\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const updateExpense = createAsyncThunk(\n  'cash-flow/expenses/updateExpense',\n  async (\n    { entry, entryId }: { entry: CashFlow.EntryInput; entryId: number },\n    { dispatch, rejectWithValue }\n  ) => {\n    try {\n      await CashFlowService.updateExistingEntry(entryId, entry);\n      await dispatch(getExpenses());\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const removeExpense = createAsyncThunk(\n  'cash-flow/expenses/removeExpense',\n  async (expenseId: number, { dispatch, rejectWithValue }) => {\n    try {\n      await CashFlowService.removeExistingEntry(expenseId);\n      await dispatch(getExpenses());\n    } catch (err) {\n      return rejectWithValue({ ...err });\n    }\n  }\n);\n\nexport const removeEntriesInBatch = createAsyncThunk(\n  'cash-flow/expenses/removeEntriesInBatch',\n  async (ids: number[], { dispatch }) => {\n    await CashFlowService.removeEntriesBatch(ids);\n    await dispatch(getExpenses());\n  }\n);\n\nexport const setQuery = createAsyncThunk(\n  'cash-flow/expenses/setQuery',\n  async (query: Partial<CashFlow.Query>, { dispatch }) => {\n    await dispatch(_setQuery(query));\n    await dispatch(getExpenses());\n  }\n);\n\nconst expenseSlice = createSlice({\n  initialState,\n  name: 'cash-flow/expenses',\n  reducers: {\n    storeList(state, action: PayloadAction<CashFlow.EntrySummary[]>) {\n      state.list = action.payload;\n    },\n    setSelectedExpenses(state, action: PayloadAction<Key[]>) {\n      state.selected = action.payload;\n    },\n    setQuery(state, action: PayloadAction<Partial<CashFlow.Query>>) {\n      state.query = {\n        ...state.query,\n        ...action.payload,\n      };\n    },\n    setFetching(state, action: PayloadAction<boolean>) {\n      state.fetching = action.payload;\n    },\n  },\n  extraReducers(builder) {\n    const { error, loading, success } = getThunkStatus([\n      getExpenses,\n      removeEntriesInBatch,\n      createExpense,\n      updateExpense,\n    ]);\n\n    builder\n      .addMatcher(error, (state) => {\n        state.fetching = false;\n      })\n      .addMatcher(success, (state) => {\n        state.fetching = false;\n      })\n      .addMatcher(loading, (state) => {\n        state.fetching = true;\n      });\n  },\n});\n\nexport const {\n  storeList,\n  setSelectedExpenses,\n  setQuery: _setQuery,\n  setFetching,\n} = expenseSlice.actions;\n\nconst expenseReducer = expenseSlice.reducer;\nexport default expenseReducer;\n"]},"metadata":{},"sourceType":"module"}