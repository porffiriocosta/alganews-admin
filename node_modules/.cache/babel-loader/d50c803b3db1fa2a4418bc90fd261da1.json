{"ast":null,"code":"import{useCallback}from'react';import{useDispatch,useSelector}from'react-redux';import*as PaymentActions from'../store/Payment.slice';export default function usePayments(){var dispatch=useDispatch();var fetching=useSelector(function(s){return s.payment.fetching;});var payments=useSelector(function(s){return s.payment.paginated;});var query=useSelector(function(s){return s.payment.query;});var selected=useSelector(function(s){return s.payment.selected;});var approvePaymentsInBatch=useCallback(function(ids){return dispatch(PaymentActions.approvePaymentsInBatch(ids));},[dispatch]);var deleteExistingPayment=useCallback(function(id){return dispatch(PaymentActions.deleteExistingPayment(id));},[dispatch]);var fetchPayments=useCallback(function(){return dispatch(PaymentActions.getAllPayments()).unwrap();},[dispatch]);var setQuery=useCallback(function(query){return dispatch(PaymentActions.setQuery(query));},[dispatch]);var setSelected=useCallback(function(keys){return dispatch(PaymentActions.storeSelectedKeys(keys));},[dispatch]);return{payments:payments,fetching:fetching,query:query,selected:selected,fetchPayments:fetchPayments,approvePaymentsInBatch:approvePaymentsInBatch,setQuery:setQuery,setSelected:setSelected,deleteExistingPayment:deleteExistingPayment};}","map":{"version":3,"sources":["D:/ReactProjetos/alganews-admin/src/core/hooks/usePayments.ts"],"names":["useCallback","useDispatch","useSelector","PaymentActions","usePayments","dispatch","fetching","s","payment","payments","paginated","query","selected","approvePaymentsInBatch","ids","deleteExistingPayment","id","fetchPayments","getAllPayments","unwrap","setQuery","setSelected","keys","storeSelectedKeys"],"mappings":"AAEA,OAASA,WAAT,KAA4B,OAA5B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,MAAO,GAAKC,CAAAA,cAAZ,KAAgC,wBAAhC,CAEA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CACpC,GAAMC,CAAAA,QAAQ,CAAGJ,WAAW,EAA5B,CAEA,GAAMK,CAAAA,QAAQ,CAAGJ,WAAW,CAAC,SAACK,CAAD,QAAkBA,CAAAA,CAAC,CAACC,OAAF,CAAUF,QAA5B,EAAD,CAA5B,CACA,GAAMG,CAAAA,QAAQ,CAAGP,WAAW,CAAC,SAACK,CAAD,QAAkBA,CAAAA,CAAC,CAACC,OAAF,CAAUE,SAA5B,EAAD,CAA5B,CACA,GAAMC,CAAAA,KAAK,CAAGT,WAAW,CAAC,SAACK,CAAD,QAAkBA,CAAAA,CAAC,CAACC,OAAF,CAAUG,KAA5B,EAAD,CAAzB,CACA,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,CAAC,SAACK,CAAD,QAAkBA,CAAAA,CAAC,CAACC,OAAF,CAAUI,QAA5B,EAAD,CAA5B,CAEA,GAAMC,CAAAA,sBAAsB,CAAGb,WAAW,CACxC,SAACc,GAAD,QAAmBT,CAAAA,QAAQ,CAACF,cAAc,CAACU,sBAAf,CAAsCC,GAAtC,CAAD,CAA3B,EADwC,CAExC,CAACT,QAAD,CAFwC,CAA1C,CAKA,GAAMU,CAAAA,qBAAqB,CAAGf,WAAW,CACvC,SAACgB,EAAD,QAAgBX,CAAAA,QAAQ,CAACF,cAAc,CAACY,qBAAf,CAAqCC,EAArC,CAAD,CAAxB,EADuC,CAEvC,CAACX,QAAD,CAFuC,CAAzC,CAKA,GAAMY,CAAAA,aAAa,CAAGjB,WAAW,CAC/B,iBAAMK,CAAAA,QAAQ,CAACF,cAAc,CAACe,cAAf,EAAD,CAAR,CAA0CC,MAA1C,EAAN,EAD+B,CAE/B,CAACd,QAAD,CAF+B,CAAjC,CAKA,GAAMe,CAAAA,QAAQ,CAAGpB,WAAW,CAC1B,SAACW,KAAD,QAA0BN,CAAAA,QAAQ,CAACF,cAAc,CAACiB,QAAf,CAAwBT,KAAxB,CAAD,CAAlC,EAD0B,CAE1B,CAACN,QAAD,CAF0B,CAA5B,CAKA,GAAMgB,CAAAA,WAAW,CAAGrB,WAAW,CAC7B,SAACsB,IAAD,QAAiBjB,CAAAA,QAAQ,CAACF,cAAc,CAACoB,iBAAf,CAAiCD,IAAjC,CAAD,CAAzB,EAD6B,CAE7B,CAACjB,QAAD,CAF6B,CAA/B,CAKA,MAAO,CACLI,QAAQ,CAARA,QADK,CAELH,QAAQ,CAARA,QAFK,CAGLK,KAAK,CAALA,KAHK,CAILC,QAAQ,CAARA,QAJK,CAKLK,aAAa,CAAbA,aALK,CAMLJ,sBAAsB,CAAtBA,sBANK,CAOLO,QAAQ,CAARA,QAPK,CAQLC,WAAW,CAAXA,WARK,CASLN,qBAAqB,CAArBA,qBATK,CAAP,CAWD","sourcesContent":["import { Key } from 'antd/lib/table/interface';\nimport { Payment } from 'danielbonifacio-sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../store';\nimport * as PaymentActions from '../store/Payment.slice';\n\nexport default function usePayments() {\n  const dispatch = useDispatch<AppDispatch>();\n\n  const fetching = useSelector((s: RootState) => s.payment.fetching);\n  const payments = useSelector((s: RootState) => s.payment.paginated);\n  const query = useSelector((s: RootState) => s.payment.query);\n  const selected = useSelector((s: RootState) => s.payment.selected);\n\n  const approvePaymentsInBatch = useCallback(\n    (ids: number[]) => dispatch(PaymentActions.approvePaymentsInBatch(ids)),\n    [dispatch]\n  );\n\n  const deleteExistingPayment = useCallback(\n    (id: number) => dispatch(PaymentActions.deleteExistingPayment(id)),\n    [dispatch]\n  );\n\n  const fetchPayments = useCallback(\n    () => dispatch(PaymentActions.getAllPayments()).unwrap(),\n    [dispatch]\n  );\n\n  const setQuery = useCallback(\n    (query: Payment.Query) => dispatch(PaymentActions.setQuery(query)),\n    [dispatch]\n  );\n\n  const setSelected = useCallback(\n    (keys: Key[]) => dispatch(PaymentActions.storeSelectedKeys(keys)),\n    [dispatch]\n  );\n\n  return {\n    payments,\n    fetching,\n    query,\n    selected,\n    fetchPayments,\n    approvePaymentsInBatch,\n    setQuery,\n    setSelected,\n    deleteExistingPayment,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}